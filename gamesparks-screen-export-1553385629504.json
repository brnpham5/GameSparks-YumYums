{"screens":{"Characters":{"shortCode":"Characters","name":"Characters","template":"<gs-row>\n    <gs-title-block title=\"Characters\" padding=\"10\">\n        <gs-row>\n            <gs-snippet snippet=\"Character_Master\"></gs-snippet>\n        </gs-row>\n    </gs-title-block>\n</gs-row>","groups":[]},"Gacha":{"shortCode":"Gacha","name":"Gacha","template":"<gs-row>\n    <gs-title-block title=\"Gacha Admin\" padding=\"10\">\n        <gs-row>\n            <gs-snippet snippet=\"Gacha_Master\"></gs-snippet>\n        </gs-row>\n    </gs-title-block>\n</gs-row>","groups":[]},"Stores":{"shortCode":"Stores","name":"Stores","template":"<gs-row>\n    <gs-title-block title=\"Stores\" padding=\"10\">\n        <gs-row>\n            <gs-snippet snippet=\"Store_Master\"></gs-snippet>\n        </gs-row>\n    </gs-title-block>\n</gs-row>","groups":[]},"Campaign":{"shortCode":"Campaign","name":"Campaign","template":"<gs-row>\n    <gs-title-block title=\"Campaign\" padding=\"10\">\n        <gs-row>\n            <gs-snippet snippet=\"Campaign_Master\"></gs-snippet>\n        </gs-row>\n    </gs-title-block>\n</gs-row>","groups":[]},"MetaData_Character_Levels":{"shortCode":"MetaData_Character_Levels","name":"MetaData: Character Levels","template":"<gs-row>\n    <gs-title-block title=\"MetaData: Character Level\" padding=\"10\">\n        <gs-row>\n            <gs-snippet snippet=\"MetaData_Character_Level_Master\"></gs-snippet>\n        </gs-row>\n    </gs-title-block>\n</gs-row>","groups":[]},"Leaderboards":{"shortCode":"Leaderboards","name":"Leaderboards","template":"<gs-row>\n    <gs-col width=\"3\">\n        <gs-title-block title=\"Leaderboards\" padding=\"10\">\n            <gs-placeholder id=\"leaderboards\">\n                <gs-snippet snippet=\"leaderboards_main_menu\"></gs-snippet>\n            </gs-placeholder>\n        </gs-title-block>\n    </gs-col>\n\n    <gs-col width=\"9\">\n        <gs-placeholder id=\"results__main\"></gs-placeholder>\n    </gs-col>\n</gs-row>","groups":[]}},"snippets":{"Campaign_Details":{"shortCode":"Campaign_Details","name":"Campaign Details","scriptData":"{\n    \"NodeId\": 5,\n    \"action\": \"view\"\n}","script":"Spark.setScriptData(\"form\", SnippetProcessor(Spark.getData().scriptData));\n\nfunction SnippetProcessor(data){\n    \n    var form = {};\n\n    switch(data.action){\n        case \"view\":\n            return view(data);\n        case \"viewNew\":\n            form.New = true;\n            return viewNew(data);\n        case \"update\":\n            update(data);\n            return view(data);\n        case \"create\":\n            return create(data);\n        case \"exit\":\n            return exit(data);\n    }\n    \n    function view(data){\n        //Load API and get entry\n        var API = Spark.getGameDataService();\n        \n        var nodeId = data.NodeId;\n        \n        //Attempt to get entry\n        var entryObject = API.getItem(\"Campaign\", nodeId);\n        \n         //If error attempting to retrieve entry\n        if(entryObject.error()){\n            Spark.setScriptError(\"ERROR\", entryObject.error());\n            Spark.exit();\n        } else {\n            //Get entry\n            var entry = entryObject.document();\n            //Access Data\n            var result = entry.getData();\n            \n            //Add names to existing characters\n            for(var i = 0; i < result.Rewards.Ingredients.length; i++) {\n                result.Rewards.Ingredients[i].Name = GetIngredientName(result.Rewards.Ingredients[i].IngredientId);\n            }\n            \n            for(var j = 0; j < result.Rewards.Shards.length; j++) {\n                result.Rewards.Shards[j].Name = GetShardName(result.Rewards.Shards[j].ShardId);\n            }\n            \n            for(var k = 0; k < result.Enemies.length; k++) {\n                if(result.Enemies[k].CharacterId) {\n                    result.Enemies[k].Name = GetCharacterName(result.Enemies[k].CharacterId);\n                } else {\n                    result.Enemies[k].Name = \"\";\n                }\n            }\n            \n            var config = Spark.getConfig();\n            var vGoods = config.getVirtualGoods();\n            \n            var ingredientsList;\n            ingredientsList = GetAllIngredients(vGoods);\n            \n            var shardsList;\n            shardsList = GetAllShards(vGoods);\n            \n            result.IngredientsList = ingredientsList;\n            result.ShardsList = shardsList;\n            \n            form.Enemies = result.Enemies;\n            form.Background = result.Background;\n            form.Rewards = result.Rewards;\n            form.NodeId = result.NodeId;\n            form.IngredientsList = result.IngredientsList;\n            form.ShardsList = result.ShardsList;\n            return form;\n        }\n    }\n    \n    function viewNew(data){\n        form.NodeId = data.NodeId;\n        var config = Spark.getConfig();\n        var vGoods = config.getVirtualGoods();\n            \n        var ingredientsList;\n        ingredientsList = GetAllIngredients(vGoods);\n            \n        var shardsList;\n        shardsList = GetAllShards(vGoods);\n        \n        form.IngredientsList = ingredientsList;\n        form.ShardsList = shardsList;\n        \n        return form;\n    }\n    \n    function create(data) {\n        var nodeId = data.NodeId;\n        \n        //Create entry and get its data object\n        var API = Spark.getGameDataService();\n        \n        //Create entry, data is best accessed via ID\n        var entry = API.createItem(\"Campaign\", nodeId);\n        \n        //Get the data object where custom data is stored\n        //Access Data\n        var entryData = entry.getData();\n        \n        var enemies = ExtractEnemies(data);\n            \n        var shards = ExtractShards(data);\n        var ingredients = ExtractIngredients(data);\n        var experience = data.Experience;\n        var money = data.Money;\n        var rewards = {\n            \"Shards\": shards,\n            \"Ingredients\": ingredients,\n            \"Experience\": experience,\n            \"Money\": money\n        };\n            \n        var background = data.Background;\n            \n        entryData.NodeId = Number(nodeId);\n        entryData.Enemies = enemies;\n        entryData.Rewards = rewards;\n        entryData.Background = background;\n        \n        var config = Spark.getConfig();\n        var vGoods = config.getVirtualGoods();\n            \n        var ingredientsList;\n        ingredientsList = GetAllIngredients(vGoods);\n            \n        var shardsList;\n        shardsList = GetAllShards(vGoods);\n        \n        form.IngredientsList = ingredientsList;\n        form.ShardsList = shardsList;\n        \n        form.NodeId = Number(nodeId);\n        form.Enemies = enemies;\n        form.Rewards = rewards;\n        form.Background = background;\n        \n        form.updated = true;\n        form.success = true;\n        \n        //Persist and return any errors\n        var entryStatus = entry.persistor().persist().error();\n        \n        //If there are errors the entry would not persist and we can act on that information\n        if(entryStatus){\n            //Output error script\n            Spark.setScriptError(\"ERROR\", entryStatus);\n            //Stop execution of script\n            Spark.exit();\n        }\n        \n        return form;\n    }\n    \n    function update(data) {\n        var nodeId = data.NodeId;\n        \n        //Load API and get entry\n        var API = Spark.getGameDataService();\n        \n        //Attempt to get entry\n        var entryObject = API.getItem(\"Campaign\", nodeId);\n        \n        //If error attempting to retrieve entry\n        if(entryObject.error()){\n            Spark.setScriptError(\"ERROR\", entryObject.error());\n            Spark.exit();\n        } else {\n            //Get entry\n            var entry = entryObject.document();\n            //Access Data\n            var entryData = entry.getData();\n        \n            var enemies = ExtractEnemies(data);\n            \n            var shards = ExtractShards(data);\n            var ingredients = ExtractIngredients(data);\n            var experience = data.Experience;\n            var money = data.Money;\n            var rewards = {\n                \"Shards\": shards,\n                \"Ingredients\": ingredients,\n                \"Experience\": Number(experience),\n                \"Money\": Number(money)\n            };\n            \n            var background = data.Background;\n            \n            entryData.NodeId = Number(nodeId);\n            entryData.Enemies = enemies;\n            entryData.Rewards = rewards;\n            entryData.Background = background;\n            form.success = true;\n            form.updated = true;\n            \n            //Persist and return any errors\n            var status = entry.persistor().persist().error();\n    \n            //If there are errors the entry would not persist and we can act on that information\n            if(status){\n            //Output error script\n                Spark.setScriptError(\"ERROR\", status);\n                //Stop execution of script\n                Spark.exit();\n            }\n        }\n    }\n    \n    function exit(data){\n        form.exit = true;\n        return form;\n    }\n    \n    function GetAllIngredients(vGoods) {\n        var ingredientsList = [];\n        for(var i = 0; i < vGoods.length; i++) {\n            if (vGoods[i].propertySet.ItemType.Type == \"Ingredient\") {\n                ingredientsList.push(vGoods[i]);\n            }\n        }\n        \n        return ingredientsList;\n    }\n    \n    function GetIngredientName(ingredientId) {\n        var config = Spark.getConfig();\n        var shortCode = ingredientId;\n        var vGood = config.getVirtualGood(shortCode);\n        var name = vGood.getName();\n        return name;\n    }\n    \n    function GetAllShards(vGoods) {\n        var shardsList = [];\n        for(var i = 0; i < vGoods.length; i++) {\n            if (vGoods[i].propertySet.ItemType.Type == \"Shard\") {\n                shardsList.push(vGoods[i]);\n            }\n        }\n        \n        return shardsList;\n    }\n    \n    function GetShardName(shardId) {\n        var config = Spark.getConfig();\n        var shortCode = shardId;\n        var vGood = config.getVirtualGood(shortCode);\n        var name = vGood.getName();\n        return name;\n    }\n\n    function GetCharacterName(characterId) {\n        //Load API and get entry\n        var API = Spark.getGameDataService();\n        \n        //Attempt to get entry\n        var entryObject = API.getItem(\"Characters\", characterId);\n        \n        //If error attempting to retrieve entry\n        if(entryObject.error()){\n            Spark.setScriptError(\"ERROR\", entryObject.error());\n            Spark.exit();\n        } else {\n            //Get entry\n            var entry = entryObject.document();\n            //Access Data\n            var data = entry.getData();\n            return data.Base.Name;\n        }\n    }\n\n    \n    function ExtractEnemies(nodeData) {\n        var enemies = [];\n        \n        var enemyZero = {\n            \"CharacterId\" : \"0\",\n            \"Name\": \"\",\n            \"Level\": 0,\n            \"Upgrades\": {\n                \"Health\": 0,\n                \"Special\": 0,\n                \"Power\": 0\n            },\n            \"Zero\": true\n        };\n        \n        var enemyOne = {\n            \"CharacterId\" : nodeData.EnemyOneId,\n            \"Name\": GetCharacterName(nodeData.EnemyOneId),\n            \"Level\": Number(nodeData.EnemyOneLevel),\n            \"Upgrades\": {\n                \"Health\": Number(nodeData.EnemyOneHealthUpgrade),\n                \"Special\": Number(nodeData.EnemyOneSpecialUpgrade),\n                \"Power\": Number(nodeData.EnemyOnePowerUpgrade)\n            }\n        };\n        \n        var enemyTwo = {\n            \"CharacterId\" : nodeData.EnemyTwoId,\n            \"Name\": GetCharacterName(nodeData.EnemyTwoId),\n            \"Level\": Number(nodeData.EnemyTwoLevel),\n            \"Upgrades\": {\n                \"Health\": Number(nodeData.EnemyTwoHealthUpgrade),\n                \"Special\": Number(nodeData.EnemyTwoSpecialUpgrade),\n                \"Power\": Number(nodeData.EnemyTwoPowerUpgrade)\n            }\n        };\n        \n        var enemyThree = {\n            \"CharacterId\" : nodeData.EnemyThreeId,\n            \"Name\": GetCharacterName(nodeData.EnemyThreeId),\n            \"Level\": Number(nodeData.EnemyThreeLevel),\n            \"Upgrades\": {\n                \"Health\": Number(nodeData.EnemyThreeHealthUpgrade),\n                \"Special\": Number(nodeData.EnemyThreeSpecialUpgrade),\n                \"Power\": Number(nodeData.EnemyThreePowerUpgrade)\n            }\n        };\n        \n        var enemyFour = {\n            \"CharacterId\" : nodeData.EnemyFourId,\n            \"Name\": GetCharacterName(nodeData.EnemyFourId),\n            \"Level\": Number(nodeData.EnemyFourLevel),\n            \"Upgrades\": {\n                \"Health\": Number(nodeData.EnemyFourHealthUpgrade),\n                \"Special\": Number(nodeData.EnemyFourSpecialUpgrade),\n                \"Power\": Number(nodeData.EnemyFourPowerUpgrade)\n            }\n        };\n        \n        if(enemyOne.CharacterId > 0 && enemyOne.Level > 0) {\n            enemies.push(enemyOne);\n        } else {\n            enemies.push(enemyZero);\n        }\n        \n        if(enemyTwo.CharacterId > 0 && enemyTwo.Level > 0) {\n            enemies.push(enemyTwo);\n        } else {\n            enemies.push(enemyZero);\n        }\n        \n        if(enemyThree.CharacterId > 0 && enemyThree.Level > 0) {\n            enemies.push(enemyThree);\n        } else {\n            enemies.push(enemyZero);\n        }\n        \n        if(enemyFour.CharacterId > 0 && enemyFour.Level > 0) {\n            enemies.push(enemyFour);\n        } else {\n            enemies.push(enemyZero);\n        }\n        \n        return enemies;\n    }\n    \n    function ExtractShards(nodeData) {\n        var shards = [];\n        var shardOne = {\n            \"ShardId\": nodeData.ShardOneSelect,\n            \"Amount\": Number(nodeData.ShardOneAmount),\n            \"Chance\": Number(nodeData.ShardOneChance)\n        }\n        \n        var shardTwo = {\n            \"ShardId\": nodeData.ShardTwoSelect,\n            \"Amount\": Number(nodeData.ShardTwoAmount),\n            \"Chance\": Number(nodeData.ShardTwoChance)\n        }\n        \n        var shardThree = {\n            \"ShardId\": nodeData.ShardThreeSelect,\n            \"Amount\": Number(nodeData.ShardThreeAmount),\n            \"Chance\": Number(nodeData.ShardThreeChance)\n        }\n        \n        var shardFour = {\n            \"ShardId\": nodeData.ShardFourSelect,\n            \"Amount\": Number(nodeData.ShardFourAmount),\n            \"Chance\": Number(nodeData.ShardFourChance)\n        }\n        \n        if(shardOne.ShardId && shardOne.Amount > 0 && shardOne.Chance > 0) {\n            shards.push(shardOne);\n        }\n        \n        if(shardTwo.ShardId && shardTwo.Amount > 0 && shardTwo.Chance > 0) {\n            shards.push(shardTwo);\n        }\n        \n        if(shardThree.ShardId && shardThree.Amount > 0 && shardThree.Chance > 0) {\n            shards.push(shardThree);\n        }\n        \n        if(shardFour.ShardId && shardFour.Amount > 0 && shardFour.Chance > 0) {\n            shards.push(shardFour);\n        }\n        \n        return shards;\n    }\n    \n    function ExtractIngredients(nodeData) {\n        var ingredients = [];\n        var ingredientOne = {\n            \"IngredientId\": nodeData.IngredientOneSelect,\n            \"Amount\": Number(nodeData.IngredientOneAmount),\n            \"Chance\": Number(nodeData.IngredientOneChance)\n        };\n        \n        var ingredientTwo = {\n            \"IngredientId\": nodeData.IngredientTwoSelect,\n            \"Amount\": Number(nodeData.IngredientTwoAmount),\n            \"Chance\": Number(nodeData.IngredientTwoChance)\n        };\n        \n        var ingredientThree = {\n            \"IngredientId\": nodeData.IngredientThreeSelect,\n            \"Amount\": Number(nodeData.IngredientThreeAmount),\n            \"Chance\": Number(nodeData.IngredientThreeChance)\n        };\n        \n        var ingredientFour = {\n            \"IngredientId\": nodeData.IngredientFourSelect,\n            \"Amount\": Number(nodeData.IngredientFourAmount),\n            \"Chance\": Number(nodeData.IngredientFourChance)\n        };\n        \n        if(ingredientOne.IngredientId && ingredientOne.Amount > 0 && ingredientOne.Chance > 0) {\n            ingredients.push(ingredientOne);\n        }\n        \n        \n        if(ingredientTwo.IngredientId &&ingredientTwo.Amount > 0 && ingredientTwo.Chance > 0) {\n            ingredients.push(ingredientTwo);\n        }\n        \n        if(ingredientThree.IngredientId &&ingredientThree.Amount > 0 && ingredientThree.Chance > 0) {\n            ingredients.push(ingredientThree);\n        }\n        \n        if(ingredientFour.IngredientId &&ingredientThree.Amount > 0 && ingredientThree.Chance > 0) {\n            ingredients.push(ingredientFour);\n        }\n        return ingredients;\n    }\n}","template":"{{#if form.exit}}\n    <gs-modal-close></gs-modal-close>\n    <gs-snippet snippet=\"Campaign_List\" target=\"content\"></gs-snippet>\n{{else}}\n    <gs-title-block title=\"Campaign Details\">\n        <gs-form \n            {{#if form.New}}\n            snippet=\"Campaign_Details?action=create&NodeId={{form.NodeId}}\" target=\"modal-large\"\n            {{else}}\n            snippet=\"Campaign_Details?action=update&NodeId={{form.NodeId}}\" target=\"modal-large\"\n            {{/if}}\n        >\n            <gs-title-block \n            {{#if form.New}}\n                title=\"Add new campaign node\"\n            {{else}}\n                title=\"Update campaign node\"\n            {{/if}}\n            >\n                <gs-row>\n                    <gs-col width=\"1\">\n                        ID\n                    </gs-col>\n                    <gs-col width=\"1\">\n                        <input value=\"{{form.NodeId}}\" type=\"number\" required name=\"nodeId\" disabled/>\n                    </gs-col>\n                </gs-row>\n                <br/>\n                <gs-row>\n                    <gs-col width=\"1\">\n                        Enemies\n                    </gs-col>\n                    <gs-col width=\"11\">\n                        <gs-row>\n                            <gs-col width=\"2\">\n                                CharacterName\n                            </gs-col>\n                            <gs-col width=\"2\">\n                                CharacterId\n                            </gs-col>\n                            <gs-col width=\"2\">\n                                Level\n                            </gs-col>\n                            <gs-col width=\"2\">\n                                Health Upgrade\n                            </gs-col>\n                            <gs-col width=\"2\">\n                                Power Upgrade\n                            </gs-col>\n                            <gs-col width=\"2\">\n                                Special Upgrade\n                            </gs-col>\n                        </gs-row>\n                        <gs-row>\n                            <gs-row>\n                                <gs-col width=\"2\">\n                                    <input value=\"{{form.Enemies.[0].Name}}\" disabled type=\"text\" name=\"EnemyOneName\"/>\n                                </gs-col>\n                                <gs-col width=\"2\">\n                                    <input value=\"{{form.Enemies.[0].CharacterId}}\" type=\"text\" name=\"EnemyOneId\"/>\n                                </gs-col>\n                                <gs-col width=\"2\">\n                                    <input value=\"{{form.Enemies.[0].Level}}\" type=\"number\" name=\"EnemyOneLevel\"/>\n                                </gs-col>\n                                <gs-col width=\"2\">\n                                    <input value=\"{{form.Enemies.[0].Upgrades.Health}}\" type=\"number\" min=\"0\" max=\"20\" name=\"EnemyOneHealthUpgrade\"/>\n                                </gs-col>\n                                <gs-col width=\"2\">\n                                    <input value=\"{{form.Enemies.[0].Upgrades.Power}}\" type=\"number\" min=\"0\" max=\"20\" name=\"EnemyOnePowerUpgrade\"/>\n                                </gs-col>\n                                <gs-col width=\"2\">\n                                    <input value=\"{{form.Enemies.[0].Upgrades.Special}}\" type=\"number\" min=\"0\" max=\"20\" name=\"EnemyOneSpecialUpgrade\"/>\n                                </gs-col>\n                            </gs-row>\n                            <gs-row>\n                                <gs-col width=\"2\">\n                                    <input value=\"{{form.Enemies.[1].Name}}\" disabled type=\"text\" name=\"EnemyTwoName\"/>\n                                </gs-col>\n                                <gs-col width=\"2\">\n                                    <input value=\"{{form.Enemies.[1].CharacterId}}\" type=\"text\" name=\"EnemyTwoId\"/>\n                                </gs-col>\n                                <gs-col width=\"2\">\n                                    <input value=\"{{form.Enemies.[1].Level}}\" type=\"number\" name=\"EnemyTwoLevel\"/>\n                                </gs-col>\n                                <gs-col width=\"2\">\n                                    <input value=\"{{form.Enemies.[1].Upgrades.Health}}\" type=\"number\" min=\"0\" max=\"20\" name=\"EnemyTwoHealthUpgrade\"/>\n                                </gs-col>\n                                <gs-col width=\"2\">\n                                    <input value=\"{{form.Enemies.[1].Upgrades.Power}}\" type=\"number\" min=\"0\" max=\"20\" name=\"EnemyTwoPowerUpgrade\"/>\n                                </gs-col>\n                                <gs-col width=\"2\">\n                                    <input value=\"{{form.Enemies.[1].Upgrades.Special}}\" type=\"number\" min=\"0\" max=\"20\" name=\"EnemyTwoSpecialUpgrade\"/>\n                                </gs-col>\n                            </gs-row>\n                            <gs-row>\n                                <gs-col width=\"2\">\n                                    <input value=\"{{form.Enemies.[2].Name}}\" disabled type=\"text\" name=\"EnemyThreeName\"/>\n                                </gs-col>\n                                <gs-col width=\"2\">\n                                    <input value=\"{{form.Enemies.[2].CharacterId}}\" type=\"text\" name=\"EnemyThreeId\"/>\n                                </gs-col>\n                                <gs-col width=\"2\">\n                                    <input value=\"{{form.Enemies.[2].Level}}\" type=\"number\" name=\"EnemyThreeLevel\"/>\n                                </gs-col>\n                                <gs-col width=\"2\">\n                                    <input value=\"{{form.Enemies.[2].Upgrades.Health}}\" type=\"number\" min=\"0\" max=\"20\" name=\"EnemyThreeHealthUpgrade\"/>\n                                </gs-col>\n                                <gs-col width=\"2\">\n                                    <input value=\"{{form.Enemies.[2].Upgrades.Power}}\" type=\"number\" min=\"0\" max=\"20\" name=\"EnemyThreePowerUpgrade\"/>\n                                </gs-col>\n                                <gs-col width=\"2\">\n                                    <input value=\"{{form.Enemies.[2].Upgrades.Special}}\" type=\"number\" min=\"0\" max=\"20\" name=\"EnemyThreeSpecialUpgrade\"/>\n                                </gs-col>\n                            </gs-row>\n                            <gs-row>\n                                <gs-col width=\"2\">\n                                    <input value=\"{{form.Enemies.[3].Name}}\" disabled type=\"text\" name=\"EnemyFourName\"/>\n                                </gs-col>\n                                <gs-col width=\"2\">\n                                    <input value=\"{{form.Enemies.[3].CharacterId}}\" type=\"text\" name=\"EnemyFourId\"/>\n                                </gs-col>\n                                <gs-col width=\"2\">\n                                    <input value=\"{{form.Enemies.[3].Level}}\" type=\"number\" name=\"EnemyFourLevel\"/>\n                                </gs-col>\n                                <gs-col width=\"2\">\n                                    <input value=\"{{form.Enemies.[3].Upgrades.Health}}\" type=\"number\" min=\"0\" max=\"20\" name=\"EnemyFourHealthUpgrade\"/>\n                                </gs-col>\n                                <gs-col width=\"2\">\n                                    <input value=\"{{form.Enemies.[3].Upgrades.Power}}\" type=\"number\" min=\"0\" max=\"20\" name=\"EnemyFourPowerUpgrade\"/>\n                                </gs-col>\n                                <gs-col width=\"2\">\n                                    <input value=\"{{form.Enemies.[3].Upgrades.Special}}\" type=\"number\" min=\"0\" max=\"20\" name=\"EnemyFourSpecialUpgrade\"/>\n                                </gs-col>\n                            </gs-row>\n                        </gs-row>\n                    </gs-col>\n                </gs-row>\n                <br/>\n                <gs-row>\n                    <gs-col width=\"1\">\n                        Shards\n                    </gs-col>\n                    <gs-col width=\"9\">\n                        <gs-row>\n                            <gs-col width=\"5\">\n                                Name\n                            </gs-col>\n                            <gs-col width=\"2\">\n                                Amount\n                            </gs-col>\n                            <gs-col width=\"2\">\n                                Chance (1%-100%)\n                            </gs-col>\n                        </gs-row>\n                        <gs-row>\n                            <gs-row>\n                                <gs-col width=\"5\">\n                                    <select name=\"ShardOneSelect\">\n                                        <option selected value={{form.Rewards.Shards.[0].ShardId}}>{{form.Rewards.Shards.[0].Name}}</option>\n                                        {{#each form.ShardsList}}\n                                            <option value={{this.shortCode}}>{{this.name}}</option>\n                                        {{/each}}\n                                    </select>\n                                </gs-col>\n                                <gs-col width=\"2\">\n                                    <input value=\"{{form.Rewards.Shards.[0].Amount}}\" type=\"number\" name=\"ShardOneAmount\"/>\n                                </gs-col>\n                                <gs-col width=\"2\">\n                                    <input value=\"{{form.Rewards.Shards.[0].Chance}}\" type=\"number\" min=\"0\" max=\"100\" name=\"ShardOneChance\"/>\n                                </gs-col>\n                            </gs-row>\n                            <gs-row>\n                                <gs-col width=\"5\">\n                                    <select name=\"ShardTwoSelect\">\n                                        <option selected value={{form.Rewards.Shards.[1].ShardId}}>{{form.Rewards.Shards.[1].Name}}</option>\n                                        {{#each form.ShardsList}}\n                                            <option value={{this.shortCode}}>{{this.name}}</option>\n                                        {{/each}}\n                                    </select>\n                                </gs-col>\n                                 <gs-col width=\"2\">\n                                    <input value=\"{{form.Rewards.Shards.[1].Amount}}\" type=\"number\" name=\"ShardTwoAmount\"/>\n                                </gs-col>\n                                <gs-col width=\"2\">\n                                    <input value=\"{{form.Rewards.Shards.[1].Chance}}\" type=\"number\" min=\"0\" max=\"100\" name=\"ShardTwoChance\"/>\n                                </gs-col>\n                            </gs-row>\n                            <gs-row>\n                                <gs-col width=\"5\">\n                                    <select name=\"ShardThreeSelect\">\n                                        <option selected value={{form.Rewards.Shards.[2].ShardId}}>{{form.Rewards.Shards.[2].Name}}</option>\n                                        {{#each form.ShardsList}}\n                                            <option value={{this.shortCode}}>{{this.name}}</option>\n                                        {{/each}}\n                                    </select>\n                                </gs-col>\n                                 <gs-col width=\"2\">\n                                    <input value=\"{{form.Rewards.Shards.[2].Amount}}\" type=\"number\" name=\"ShardThreeAmount\"/>\n                                </gs-col>\n                                <gs-col width=\"2\">\n                                    <input value=\"{{form.Rewards.Shards.[2].Chance}}\" type=\"number\" min=\"0\" max=\"100\" name=\"ShardThreeChance\"/>\n                                </gs-col>\n                            </gs-row>\n                            <gs-row>\n                                <gs-col width=\"5\">\n                                    <select name=\"ShardFourSelect\">\n                                        <option selected value={{form.Rewards.Shards.[3].ShardId}}>{{form.Rewards.Shards.[3].Name}}</option>\n                                        {{#each form.ShardsList}}\n                                            <option value={{this.shortCode}}>{{this.name}}</option>\n                                        {{/each}}\n                                    </select>\n                                </gs-col>\n                                 <gs-col width=\"2\">\n                                    <input value=\"{{form.Rewards.Shards.[3].Amount}}\" type=\"number\" name=\"ShardFourAmount\"/>\n                                </gs-col>\n                                <gs-col width=\"2\">\n                                    <input value=\"{{form.Rewards.Shards.[3].Chance}}\" type=\"number\" min=\"0\" max=\"100\" name=\"ShardFourChance\"/>\n                                </gs-col>\n                            </gs-row>\n                        </gs-row>\n                    </gs-col>\n                </gs-row>\n                <br/>\n                <gs-row>\n                    <gs-col width=\"1\">\n                        Ingredients\n                    </gs-col>\n                    <gs-col width=\"9\">\n                        <gs-row>\n                            <gs-col width=\"5\">\n                                Name\n                            </gs-col>\n                            <gs-col width=\"2\">\n                                Amount\n                            </gs-col>\n                            <gs-col width=\"2\">\n                                Chance (1%-100%)\n                            </gs-col>\n                        </gs-row>\n                        <gs-row>\n                            <gs-row>\n                               <gs-col width=\"5\">\n                                    <select name=\"IngredientOneSelect\">\n                                        <option selected value={{form.Rewards.Ingredients.[0].IngredientId}}>{{form.Rewards.Ingredients.[0].Name}}</option>\n                                        {{#each form.IngredientsList}}\n                                        <option value={{this.shortCode}}>{{this.name}}</option>\n                                        {{/each}}\n                                    </select>\n                                </gs-col>\n                                <gs-col width=\"2\">\n                                    <input value=\"{{form.Rewards.Ingredients.[0].Amount}}\" type=\"number\" name=\"IngredientOneAmount\"/>\n                                </gs-col>\n                                <gs-col width=\"2\">\n                                    <input value=\"{{form.Rewards.Ingredients.[0].Chance}}\" type=\"number\" min=\"0\" max=\"100\" name=\"IngredientOneChance\"/>\n                                </gs-col>\n                            </gs-row>\n                            <gs-row>\n                                <gs-col width=\"5\">\n                                    <select name=\"IngredientTwoSelect\">\n                                        <option selected value={{form.Rewards.Ingredients.[1].IngredientId}}>{{form.Rewards.Ingredients.[1].Name}}</option>\n                                        {{#each form.IngredientsList}}\n                                        <option value={{this.shortCode}}>{{this.name}}</option>\n                                        {{/each}}\n                                    </select>\n                                </gs-col>\n                                 <gs-col width=\"2\">\n                                    <input value=\"{{form.Rewards.Ingredients.[1].Amount}}\" type=\"number\" name=\"IngredientTwoAmount\"/>\n                                </gs-col>\n                                <gs-col width=\"2\">\n                                    <input value=\"{{form.Rewards.Ingredients.[1].Chance}}\" type=\"number\" min=\"0\" max=\"100\" name=\"IngredientTwoChance\"/>\n                                </gs-col>\n                            </gs-row>\n                            <gs-row>\n                                <gs-col width=\"5\">\n                                    <select name=\"IngredientThreeSelect\">\n                                        <option selected value={{form.Rewards.Ingredients.[2].IngredientId}}>{{form.Rewards.Ingredients.[2].Name}}</option>\n                                        {{#each form.IngredientsList}}\n                                        <option value={{this.shortCode}}>{{this.name}}</option>\n                                        {{/each}}\n                                    </select>\n                                </gs-col>\n                                 <gs-col width=\"2\">\n                                    <input value=\"{{form.Rewards.Ingredients.[2].Amount}}\" type=\"number\" name=\"IngredientThreeAmount\"/>\n                                </gs-col>\n                                <gs-col width=\"2\">\n                                    <input value=\"{{form.Rewards.Ingredients.[2].Chance}}\" type=\"number\" min=\"0\" max=\"100\" name=\"IngredientThreeChance\"/>\n                                </gs-col>\n                            </gs-row>\n                            <gs-row>\n                                <gs-col width=\"5\">\n                                    <select name=\"IngredientFourSelect\">\n                                        <option selected value={{form.Rewards.Ingredients.[3].IngredientId}}>{{form.Rewards.Ingredients.[3].Name}}</option>\n                                        {{#each form.IngredientsList}}\n                                        <option value={{this.shortCode}}>{{this.name}}</option>\n                                        {{/each}}\n                                    </select>\n                                </gs-col>\n                                 <gs-col width=\"2\">\n                                    <input value=\"{{form.Rewards.Ingredients.[3].Amount}}\" type=\"number\" name=\"IngredientFourAmount\"/>\n                                </gs-col>\n                                <gs-col width=\"2\">\n                                    <input value=\"{{form.Rewards.Ingredients.[3].Chance}}\" type=\"number\" min=\"0\" max=\"100\" name=\"IngredientFourChance\"/>\n                                </gs-col>\n                            </gs-row>\n                        </gs-row>\n                    </gs-col>\n                </gs-row>\n                <br/>\n                <gs-row>\n                    <gs-col width=\"1\">\n                        Experience\n                    </gs-col>\n                    <gs-col width=\"3\">\n                        <input value=\"{{form.Rewards.Experience}}\" type=\"number\" required name=\"Experience\"/>\n                    </gs-col>\n                </gs-row>\n                <br/>\n                <gs-row>\n                    <gs-col width=\"1\">\n                        Money\n                    </gs-col>\n                    <gs-col width=\"3\">\n                        <input value=\"{{form.Rewards.Money}}\" type=\"number\" required name=\"Money\"/>\n                    </gs-col>\n                </gs-row>\n                <br/>\n                <gs-row>\n                    <gs-col width=\"1\">\n                        Background\n                    </gs-col>\n                    <gs-col width=\"3\">\n                        <input value=\"{{form.Background}}\" type=\"text\" required name=\"Background\"/>\n                    </gs-col>\n                </gs-row>\n                <gs-row>\n                    <gs-col width=\"4\" offset=\"1\">\n                    {{#if form.updated}}\n                        {{#if form.success}}\n                            <gs-alert type=\"success\" message=\"Saved!\"></gs-alert>\n                        {{else}}\n                            <gs-alert type=\"error\" message=\"{{error}}\"></gs-alert>\n                        {{/if}}\n                    {{/if}}\n                    </gs-col>\n                    <gs-col width=\"3\">\n                        <gs-submit>Save Changes</gs-submit>\n                    </gs-col>\n                    <gs-col width=\"1\">\n                        <gs-link snippet=\"Campaign_Details?action=exit\"><Button>Close</Button></gs-link>\n                    </gs-col>\n                </gs-row>\n            </gs-title-block>\n        </gs-form>\n    </gs-title-block>\n{{/if}}\n    ","groups":[]},"Campaign_List":{"shortCode":"Campaign_List","name":"Campaign List","scriptData":"","script":"Spark.setScriptData(\"results\", SnippetProcessor(Spark.getData().scriptData));\n\nfunction SnippetProcessor(data){\n    \n    var form = {};\n    \n    return view(data);\n    \n    function view(data){\n        // limit of results returned\n        var limit = 50;\n        \n        var campaigns = GetAllCampaignData();\n        var count = campaigns.length;\n        form.count = count;\n        form.newNode = count + 1;\n        form.campaigns = campaigns;\n        \n        \n        // if count is lower that the limit\n        if(count < limit){\n            form.limit = count;\n        } else{\n            form.limit = limit;\n        }\n        \n        return form;\n    }\n    \n    function GetAllCampaignData() {\n        //Load API and get entry\n        var API = Spark.getGameDataService();\n\n        var condition = API.N(\"NodeId\").gt(-1);\n        var sortOrder = API.sort(\"NodeId\", true);\n        var query = API.queryItems(\"Campaign\", condition, sortOrder);\n    \n        if(query.error()){\n            //Output error script\n            Spark.setScriptError(\"ERROR\", query.error());\n            //Stop execution of script\n            Spark.exit();    \n        } else{\n             //Create empty object\n            var data = [];\n            //While there are still entries in the cursor retrieved from query\n            while(query.cursor().hasNext()){\n                //Get the entry\n                entry = query.cursor().next();\n                //Populate object with the entries. key = entry ID\n                \n                var entryData = entry.getData();\n                for(var i = 0; i < entryData.Rewards.Ingredients.length; i++){\n                    entryData.Rewards.Ingredients[i].Name = GetVGoodName(entryData.Rewards.Ingredients[i].IngredientId);\n                }\n                \n                for(var j = 0; j < entryData.Rewards.Shards.length; j++){\n                    entryData.Rewards.Shards[j].Name = GetVGoodName(entryData.Rewards.Shards[j].ShardId);\n                }\n                data.push(entryData);\n            }\n            return data;\n        }\n    }\n    \n    function GetVGoodName(ingredientId) {\n        var config = Spark.getConfig();\n        var shortCode = ingredientId;\n        var vGood = config.getVirtualGood(shortCode);\n        var name = vGood.getName();\n        return name;\n    }\n}","template":"<gs-title-block title=\"Results : {{results.limit}} of {{results.count}}\">\n{{#if results.campaigns}}\n    <gs-row>\n        <b>\n        <gs-row>\n            <gs-col width=\"1\">ID</gs-col>\n            <gs-col width=\"2\">Enemies</gs-col>\n            <gs-col width=\"1\">\n                Money/Experience\n            </gs-col>\n            <gs-col width=\"3\">Ingredients\n                <gs-row>\n                    <gs-col width=\"7\">\n                        Name\n                    </gs-col>\n                    <gs-col width=\"2\">\n                        Amount\n                    </gs-col>\n                    <gs-col width=\"3\">\n                        Chance\n                    </gs-col>\n                </gs-row>\n            </gs-col>\n            <gs-col width=\"3\">Shards\n                <gs-row>\n                    <gs-col width=\"7\">\n                        Name\n                    </gs-col>\n                    <gs-col width=\"2\">\n                        Amount\n                    </gs-col>\n                    <gs-col width=\"3\">\n                        Chance\n                    </gs-col>\n                </gs-row>\n            </gs-col>\n            <gs-col width=\"1\">Background</gs-col>\n        </gs-row>\n        </b>\n        {{#each results.campaigns}}\n            <hr/>\n            <gs-row>\n                <gs-col width=\"1\">{{NodeId}}</gs-col>\n                <gs-col width=\"2\">\n                    {{#each this.Enemies}}\n                        <gs-row>\n                            <gs-col width=\"10\">\n                                {{this.Name}}\n                            </gs-col>\n                            {{#if this.Zero}}\n                            {{else}}\n                                <gs-col width=\"2\">\n                                    Lvl {{this.Level}}\n                                </gs-col>\n                            {{/if}}\n                        </gs-row>\n                    {{/each}}\n                </gs-col>\n                <gs-col width=\"1\">\n                    <gs-col width=\"6\">{{Rewards.Money}}</gs-col>\n                    <gs-col width=\"6\">{{Rewards.Experience}}</gs-col>\n                </gs-col>\n                <gs-col width=\"3\">\n                    {{#each this.Rewards.Ingredients}}\n                        <gs-row>\n                            <gs-col width=\"7\">\n                                {{this.Name}}\n                            </gs-col>\n                            <gs-col width=\"2\">\n                                {{this.Amount}}\n                            </gs-col>\n                            <gs-col width=\"3\">\n                                {{this.Chance}}%\n                            </gs-col>\n                        </gs-row>\n                    {{/each}}\n                </gs-col>\n                <gs-col width=\"3\">\n                    {{#each this.Rewards.Shards}}\n                        <gs-row>\n                            <gs-col width=\"7\">\n                                {{this.Name}}\n                            </gs-col>\n                            <gs-col width=\"2\">\n                                {{this.Amount}}\n                            </gs-col>\n                            <gs-col width=\"3\">\n                                {{this.Chance}}%\n                            </gs-col>\n                        </gs-row>\n                    {{/each}}\n                </gs-col>\n                <gs-col width=\"1\">{{Background}}</gs-col>\n                <gs-col width=\"1\"><gs-link snippet=\"Campaign_Details?action=view&NodeId={{NodeId}}\" target=\"modal-large\"><i class=\"icon-edit\"/></gs-link></gs-col>\n            </gs-row>\n        {{/each}}\n        <br>\n        <gs-row name=\"add-level\">\n            <gs-col width\"12\">\n                <gs-link snippet=\"Campaign_Details?action=viewNew&NodeId={{results.newNode}}\" target=\"modal-large\"><i class=\"icon-plus\" style=\"font-size:25px\"/></gs-link>\n            </gs-col>\n        </gs-row>\n        <br>\n    </gs-row>\n{{/if}}\n</gs-title-block>","groups":[]},"Campaign_Master":{"shortCode":"Campaign_Master","name":"Campaign Master","scriptData":"{\n}","script":"Spark.setScriptData(\"node\", SnippetProcessor(Spark.getData().scriptData))\n\nfunction SnippetProcessor(data){\n    \n    var node = {};\n    return view(data);\n    \n    function view(data){\n        \n        return node;\n    }\n}\n","template":"<gs-row>\n    <gs-col width=\"12\">\n        <gs-placeholder id=\"content\">\n            <gs-snippet snippet=\"Campaign_List\"></gs-snippet>\n        </gs-placeholder>\n    </gs-col>\n</gs-row>\n","groups":[]},"Character_List":{"shortCode":"Character_List","name":"Character List","scriptData":"{\n    \n    \n}","script":"Spark.setScriptData(\"results\", SnippetProcessor(Spark.getData().scriptData))\n\nfunction SnippetProcessor(data){\n    var metaData = GetMetaData();\n    var form = {};\n    \n    return view(data);\n    \n    function view(data){\n        // limit of results returned\n        var limit = 50;\n        \n        var characters = GetAllCharacterData();\n        var count = characters.length;\n        form.count = count;\n        form.newCharacter = count;\n        form.characters = characters;\n        \n        // if count is lower that the limit\n        if(count < limit){\n            form.limit = count;\n        } else{\n            form.limit = limit;\n        }\n        \n        return form;\n    }\n    \n    function GetAllCharacterData() {\n         //Load API and get entry\n        var API = Spark.getGameDataService();\n    \n        var condition = API.N(\"CharacterId\").gt(-1);\n        var sortOrder = API.sort(\"CharacterId\", true);\n        var query = API.queryItems(\"Characters\", condition, sortOrder);\n        \n        if(query.error()){\n            //Output error script\n            Spark.setScriptError(\"ERROR\", query.error());\n            //Stop execution of script\n            Spark.exit();    \n        } else{\n             //Create empty object\n            var data = [];\n            //While there are still entries in the cursor retrieved from query\n            while(query.cursor().hasNext()){\n                //Get the entry\n                entry = query.cursor().next();\n                //Populate object with the entries. key = entry ID\n                entryData = entry.getData();\n                entryData.Base.Tag1Name = GetTagName(entryData.Base.Tag1);\n                entryData.Base.Tag2Name = GetTagName(entryData.Base.Tag2);\n                entryData.Base.RangeName = GetRangeName(entryData.Base.Range);\n                entryData.Base.RoleName = GetRoleName(entryData.Base.Role);\n                data.push(entryData);\n            }\n        }\n        return data;\n    }\n    \n    function GetMetaData() {\n        //Load API and get entry\n        var API = Spark.getGameDataService();\n        \n        //Attempt to get entry\n        var entryObject = API.getItem(\"MetaData\", \"Character\");\n        \n        //If error attempting to retrieve entry\n        if(entryObject.error()){\n            Spark.setScriptError(\"ERROR\", entryObject.error())\n            Spark.exit();\n        } else {\n            //Get entry\n            var entry = entryObject.document();\n            //Access Data\n            var data = entry.getData();\n            \n            return data;\n        }\n    }\n    \n    function GetSpecialTypeName(special) {\n        return metaData.Configs.SpecialTypes[special.Type].Name;\n    }\n    \n    function GetTagName(tag) {\n        return metaData.Configs.Tags[tag].Name;\n    }\n    \n    function GetSpecialTargetPatternName(special) {\n        return metaData.Configs.TargetPatterns[special.TargetPattern].Name;\n    }\n    \n    function GetSpecialStatusEffectName(special) {\n        return metaData.Configs.StatusEffects[special.StatusEffect].Name;\n    }\n    \n    function GetRangeName(range) {\n        return metaData.Configs.Ranges[range].Name;\n    }\n    \n    function GetRoleName(role){\n        return metaData.Configs.Roles[role].Name;\n    }\n}","template":"<gs-title-block title=\"Results : {{results.limit}} of {{results.count}}\">\n{{#if results.characters}}\n    <gs-row>\n        <b>\n        <gs-row>\n            <gs-col width=\"1\"></gs-col>\n            <gs-col width=\"1\">ID</gs-col>\n            <gs-col width=\"2\">Name</gs-col>\n            <gs-col width=\"1\">Rarity</gs-col>\n            <gs-col width=\"2\">Role</gs-col>\n            <gs-col width=\"1\">Tag1</gs-col>\n            <gs-col width=\"1\">Tag2</gs-col>\n            <gs-col width=\"1\">Special</gs-col>\n            <gs-col width=\"1\">Range</gs-col>\n            <gs-col width=\"1\"></gs-col>\n        </gs-row>\n        </b>\n        {{#each results.characters}}\n            <hr/>\n            <gs-row>\n                <gs-col width=\"1\"><gs-link snippet=\"Character_Details?action=view&CharacterId={{Base.CharacterId}}\" target=\"modal-small\"><i class=\"icon-edit\"/></gs-link></gs-col>\n                <gs-col width=\"1\">{{Base.CharacterId}}</gs-col>\n                <gs-col width=\"2\">{{Base.Name}}</gs-col>\n                <gs-col width=\"1\">{{Base.Rarity}}</gs-col>\n                <gs-col width=\"2\">{{Base.RoleName}}</gs-col>\n                <gs-col width=\"1\">{{Base.Tag1Name}}</gs-col>\n                <gs-col width=\"1\">{{Base.Tag2Name}}</gs-col>\n                <gs-col width=\"1\">{{Special.Name}}</gs-col>\n                <gs-col width=\"1\">{{Base.RangeName}}</gs-col>\n                <gs-col width=\"1\"><gs-link snippet=\"Character_Details?action=view&CharacterId={{Base.CharacterId}}\" target=\"modal-small\"><i class=\"icon-edit\"/></gs-link></gs-col>\n            </gs-row>\n        {{/each}}\n        <br>\n        <gs-row name=\"add-character\">\n            <gs-col width\"12\">\n                <gs-link snippet=\"Character_Details?action=viewNew&CharacterId={{results.newCharacter}}\" target=\"modal-small\"><i class=\"icon-plus\" style=\"font-size:25px\"/></gs-link>\n            </gs-col>\n        </gs-row>\n    </gs-row>\n{{/if}}\n</gs-title-block>","groups":[]},"Character_Master":{"shortCode":"Character_Master","name":"Character Master","scriptData":"","script":"Spark.setScriptData(\"form\", SnippetProcessor(Spark.getData().scriptData))\n\nfunction SnippetProcessor(data){\n    \n    var form = {};\n    return view(data);\n    \n    function view(data){\n        \n        return form;\n    }\n}\n","template":"<gs-row>\n    <gs-col width=\"12\">\n        <gs-placeholder id=\"content\">\n            <gs-snippet snippet=\"Character_List\"></gs-snippet>\n        </gs-placeholder>\n    </gs-col>\n</gs-row>","groups":[]},"Character_Details":{"shortCode":"Character_Details","name":"Character Details","scriptData":"{\n    \"CharacterId\": 14,\n    \"action\": \"view\"\n}","script":"Spark.setScriptData(\"form\", SnippetProcessor(Spark.getData().scriptData));\n\nfunction SnippetProcessor(data){\n    var metaData = GetMetaData();\n    \n    var form = {};\n    //Configs\n    form.SpecialTypes = metaData.Configs.SpecialTypes;\n    form.TargetPatterns = metaData.Configs.TargetPatterns;\n    form.Tags = metaData.Configs.Tags;\n    form.StatusEffects = metaData.Configs.StatusEffects;\n    form.Ranges = metaData.Configs.Ranges;\n    form.Roles = metaData.Configs.Roles;\n    \n    switch(data.action) {\n        case \"view\":\n            return view(data);\n        case \"viewNew\":\n            form.New = true;\n            return viewNew(data);\n        case \"update\":\n            return update(data);\n        case \"create\":\n            return create(data);\n        case \"exit\":\n            return exit(data);\n    }\n    \n    function viewNew(data){\n        form.CharacterId = data.CharacterId;\n        \n        return form;\n    }\n    \n    function view(data){\n        var characterId = data.CharacterId;\n        \n        //Load API and get entry\n        var API = Spark.getGameDataService();\n        \n        //Attempt to get entry\n        var entryObject = API.getItem(\"Characters\", characterId);\n        \n        //If error attempting to retrieve entry\n        if(entryObject.error()){\n            Spark.setScriptError(\"ERROR\", entryObject.error())\n            Spark.exit();\n        } else {\n            //Get entry\n            var entry = entryObject.document();\n            //Access Data\n            var entryData = entry.getData();\n            \n            var names = {\n                \"SpecialType\" : GetSpecialTypeName(entryData.Special),\n                \"SpecialTargetPattern\" : GetSpecialTargetPatternName(entryData.Special),\n                \"SpecialStatusEffect\" : GetSpecialStatusEffectName(entryData.Special),\n                \"Range\" : GetRangeName(entryData.Base.Range),\n                \"RoleName\": GetRoleName(entryData.Base.Role),\n                \"Tag1Name\": GetTagName(entryData.Base.Tag1),\n                \"Tag2Name\": GetTagName(entryData.Base.Tag2)\n            };\n            \n            form.Base = entryData.Base;\n            form.Special = entryData.Special;\n            form.Names = names;\n            form.CharacterId = characterId;\n            form.UpgradeData = entryData.UpgradeData;\n            \n            return form;\n        }\n    }\n    \n    function update(data) {\n        var characterId = data.CharacterId;\n        //Load API and get entry\n        var API = Spark.getGameDataService();\n        \n        //Attempt to get entry\n        var entryObject = API.getItem(\"Characters\", characterId);\n        \n        //If error attempting to retrieve entry\n        if(entryObject.error()){\n            Spark.setScriptError(\"ERROR\", entryObject.error())\n            Spark.exit();\n        } else {\n            //Get entry\n            var entry = entryObject.document();\n            //Access Data\n            var entryData = entry.getData();\n            \n            var special = {\n                \"Name\": data.SpecialName,\n                \"Type\": Number(data.SpecialType),\n                \"Multiplier\": data.SpecialMultiplier,\n                \"TargetPattern\": Number(data.SpecialTargetPattern),\n                \"StatusEffect\": Number(data.SpecialStatusEffect)\n            }\n            \n            var base = {\n                \"CharacterId\": Number(data.CharacterId),\n                \"Name\": data.CharacterName,\n                \"Rarity\": Number(data.Rarity),\n                \"Range\": Number(data.Range),\n                \"Role\": Number(data.Role),\n                \"StatRatio\": Number(data.StatRatio),\n                //\"Health\": Number(data.Health),\n                //\"Power\": Number(data.Power),\n                //\"Charge\": Number(data.Charge),\n                //\"Speed\": Number(data.Speed),\n                \"Charge\": 10,\n                \"Speed\": 2.0,\n                \"Tag1\": Number(data.Tag1),\n                \"Tag2\": Number(data.Tag2)\n            };\n            \n            var upgradeData = {\n                \"Upgrade_1\": {\n                    \"Health\": Number(data.UpgradeData_Health_1),\n                    \"Power\": Number(data.UpgradeData_Power_1),\n                },\n                \"Upgrade_2\": {\n                    \"Health\": Number(data.UpgradeData_Health_2),\n                    \"Power\": Number(data.UpgradeData_Power_2),\n                },\n                \"Upgrade_3\": {\n                    \"Health\": Number(data.UpgradeData_Health_3),\n                    \"Power\": Number(data.UpgradeData_Power_3),\n                },\n                \"Upgrade_4\": {\n                    \"Health\": Number(data.UpgradeData_Health_4),\n                    \"Power\": Number(data.UpgradeData_Power_4)\n                }\n            };\n            \n            entryData.Base = base;\n            entryData.Special = special;\n            entryData.UpgradeData = upgradeData;\n            \n            var names = {\n                \"SpecialType\" : GetSpecialTypeName(entryData.Special),\n                \"SpecialTargetPattern\" : GetSpecialTargetPatternName(entryData.Special),\n                \"SpecialStatusEffect\" : GetSpecialStatusEffectName(entryData.Special),\n                \"Range\" : GetRangeName(entryData.Base.Range),\n                \"RoleName\": GetRoleName(entryData.Base.Role),\n                \"Tag1Name\": GetTagName(entryData.Base.Tag1),\n                \"Tag2Name\": GetTagName(entryData.Base.Tag2)\n            };\n            \n            form.Base = base;\n            form.Special = special;\n            form.Names = names;\n            form.CharacterId = characterId;\n            form.UpgradeData = upgradeData;\n            \n            form.success = true;\n            form.updated = true;\n            \n            //Persist and return any errors\n            var status = entry.persistor().persist().error();\n            CreateCharacterLevelTable(entryData);\n            //If there are errors the entry would not persist and we can act on that information\n            if(status){\n            //Output error script\n                Spark.setScriptError(\"ERROR\", status);\n                //Stop execution of script\n                Spark.exit();\n            }\n            \n            return form;\n        }\n    }\n    \n    function create(data){\n        var characterId = data.CharacterId;\n        \n        //Create entry and get its data object\n        var API = Spark.getGameDataService();\n        \n        //Create entry, data is best accessed via ID\n        var entry = API.createItem(\"Characters\", characterId);\n        \n        //Get the data object where custom data is stored\n        //Access Data\n        var entryData = entry.getData();\n        \n        var special = {\n            \"Name\": data.SpecialName,\n            \"Type\": Number(data.SpecialType),\n            \"Multiplier\": data.SpecialMultiplier,\n            \"TargetPattern\": Number(data.SpecialTargetPattern),\n            \"StatusEffect\": Number(data.SpecialStatusEffect)\n        }\n            \n        var base = {\n            \"CharacterId\": Number(data.CharacterId),\n            \"Name\": data.CharacterName,\n            \"Rarity\": Number(data.Rarity),\n            \"Range\": Number(data.Range),\n            \"Role\": Number(data.Role),\n            \"StatRatio\": Number(data.StatRatio),\n            \"Charge\": 10,\n            \"Speed\": 2.0,\n            \"Tag1\": Number(data.Tag1),\n            \"Tag2\": Number(data.Tag2)\n        };\n            \n        var upgradeData = {\n            \"Upgrade_1\": {\n                \"Health\": Number(data.UpgradeData_Health_1),\n                \"Power\": Number(data.UpgradeData_Power_1),\n            },\n            \"Upgrade_2\": {\n                \"Health\": Number(data.UpgradeData_Health_2),\n                \"Power\": Number(data.UpgradeData_Power_2),\n            },\n            \"Upgrade_3\": {\n                \"Health\": Number(data.UpgradeData_Health_3),\n                \"Power\": Number(data.UpgradeData_Power_3),\n            },\n            \"Upgrade_4\": {\n                \"Health\": Number(data.UpgradeData_Health_4),\n                \"Power\": Number(data.UpgradeData_Power_4)\n            }\n        };\n        \n        entryData.Base = base;\n        entryData.Special = special;\n        entryData.UpgradeData = upgradeData;\n        \n        var names = {\n            \"SpecialType\" : GetSpecialTypeName(entryData.Special),\n            \"SpecialTargetPattern\" : GetSpecialTargetPatternName(entryData.Special),\n            \"SpecialStatusEffect\" : GetSpecialStatusEffectName(entryData.Special),\n            \"Range\" : GetRangeName(entryData.Base.Range),\n            \"RoleName\": GetRoleName(entryData.Base.Role),\n            \"Tag1Name\": GetTagName(entryData.Base.Tag1),\n            \"Tag2Name\": GetTagName(entryData.Base.Tag2)\n        };\n            \n        form.Base = base;\n        form.Special = special;\n        form.Names = names;\n        form.CharacterId = characterId;\n        form.UpgradeData = upgradeData;\n        \n        form.success = true;\n        form.updated = true;\n        form.Create = true;\n        //Persist and return any errors\n        var entryStatus = entry.persistor().persist().error();\n        \n        //If there are errors the entry would not persist and we can act on that information\n        if(entryStatus){\n            //Output error script\n            Spark.setScriptError(\"ERROR\", entryStatus);\n            //Stop execution of script\n            Spark.exit();\n        }\n        \n        CreateCharacterLevelTable(entryData);\n        \n        return form;\n    }\n    \n    function exit(data){\n        form.exit = true;\n        return form;\n    }\n    \n    \n    function CreateCharacterLevelTable(characterData){\n        var characterId = characterData.Base.CharacterId;\n        //Load API and get entry\n        var API = Spark.getGameDataService();\n        \n        //Attempt to get entry\n        var entryObject = API.createItem(\"Characters\", \"LevelTable\" + characterId.toString());\n        \n        //Get the data object where custom data is stored\n        //Access Data\n        var entryData = entryObject.getData();\n\n        var levelTable = GetLevelTable(characterData.Base.Rarity);\n        var ratio = metaData.Configs.Roles[characterData.Base.Role].Ratio;\n        var statRatio = characterData.Base.StatRatio;\n        var basePoints = 0;\n        var characterLevelTable = [];\n        for(var Level = 0; Level <= 100; Level++){\n            basePoints = levelTable.Levels[Level].Total;\n            var health = Math.round(((ratio.Health/10) + statRatio) * basePoints);\n            var power = Math.round((((ratio.Power/10) - statRatio) * basePoints) / 15);\n            var tableEntry = {\n                \"Health\": health,\n                \"Power\": power\n            };\n                \n            characterLevelTable.push(tableEntry);\n        }\n        \n        entryData.CharacterId = characterData.Base.CharacterId;\n        entryData.Table = characterLevelTable;\n            \n        //Persist and return any errors\n        var status = entryObject.persistor().persist().error();\n        //If there are errors the entry would not persist and we can act on that information\n        if(status){\n        //Output error script\n            Spark.setScriptError(\"ERROR\", status);\n            //Stop execution of script\n            Spark.exit();\n        }\n    }\n    \n    function GetMetaData() {\n        //Load API and get entry\n        var API = Spark.getGameDataService();\n        \n        //Attempt to get entry\n        var entryObject = API.getItem(\"MetaData\", \"Character\");\n        \n        //If error attempting to retrieve entry\n        if(entryObject.error()){\n            Spark.setScriptError(\"ERROR\", entryObject.error())\n            Spark.exit();\n        } else {\n            //Get entry\n            var entry = entryObject.document();\n            //Access Data\n            var data = entry.getData();\n            \n            return data;\n        }\n    }\n    \n    function GetLevelTable(tableId){\n        //Load API and get entry\n        var API = Spark.getGameDataService();\n        \n        //Attempt to get entry\n        var entryObject = API.getItem(\"MetaData\", \"CharacterLevel\" + tableId.toString());\n        \n        //If error attempting to retrieve entry\n        if(entryObject.error()){\n            Spark.setScriptError(\"ERROR\", entryObject.error())\n            Spark.exit();\n        } else {\n            //Get entry\n            var entry = entryObject.document();\n            //Access Data\n            var entryData = entry.getData();\n            \n            return entryData;\n        }\n    }\n    \n    function GetSpecialTypeName(special) {\n        return metaData.Configs.SpecialTypes[special.Type].Name;\n    }\n    \n    function GetTagName(tag) {\n        return metaData.Configs.Tags[tag].Name;\n    }\n    \n    function GetSpecialTargetPatternName(special) {\n        return metaData.Configs.TargetPatterns[special.TargetPattern].Name;\n    }\n    \n    function GetSpecialStatusEffectName(special) {\n        return metaData.Configs.StatusEffects[special.StatusEffect].Name;\n    }\n    \n    function GetRangeName(range) {\n        return metaData.Configs.Ranges[range].Name;\n    }\n    \n    function GetRoleName(role){\n        return metaData.Configs.Roles[role].Name;\n    }\n    \n}","template":"{{#if form.exit}}\n    <gs-modal-close></gs-modal-close>\n    <gs-snippet snippet=\"Character_List\" target=\"content\"></gs-snippet>\n{{else}}\n    <gs-title-block title=\"Character Details\">\n        <gs-form\n            {{#if form.New}}\n            snippet=\"Character_Details?action=create&CharacterId={{form.CharacterId}}\" target=\"modal-small\"\n            {{else}}\n            snippet=\"Character_Details?action=update&CharacterId={{form.CharacterId}}\" target=\"modal-small\"\n            {{/if}}\n        >\n            <gs-title-block\n            {{#if form.New}}\n            title=\"Create new character\"\n            {{else if form.Create}}\n            title=\"Successfully created new character\"\n            {{else}}\n            title=\"Update Character\"\n            {{/if}}\n            >\n                <gs-row>\n                    <gs-col width=\"2\">\n                        Id\n                    </gs-col>\n                    <gs-col width = \"4\">\n                        <input value=\"{{form.CharacterId}}\" type=\"number\" required name=\"CharacterId\" disabled/>\n                    </gs-col>\n                </gs-row>\n                <gs-row>\n                    <gs-col width=\"2\">\n                        Name\n                    </gs-col>\n                    <gs-col width=\"4\">\n                        <input value=\"{{form.Base.Name}}\" type=\"text\" required name=\"CharacterName\"/>\n                    </gs-col>\n                </gs-row>\n                <gs-row>\n                    <gs-col width=\"2\">\n                        Tags\n                    </gs-col>\n                    <gs-col width=\"4\" align=\"left\">\n                        <select name=\"Tag1\" required>\n                            <option selected value={{form.Base.Tag1}}>{{form.Names.Tag1Name}}</option>\n                            {{#each form.Tags}}\n                                <option value={{@index}}>{{this.Name}}</option>\n                            {{/each}}\n                        </select>\n                    </gs-col>\n                    <gs-col width=\"4\" align=\"left\">\n                        <select name=\"Tag2\" required>\n                            <option selected value={{form.Base.Tag2}}>{{form.Names.Tag2Name}}</option>\n                            {{#each form.Tags}}\n                                <option value={{@index}}>{{this.Name}}</option>\n                            {{/each}}\n                        </select>\n                    </gs-col>\n                </gs-row>\n                <gs-row>\n                    <gs-col width=\"2\">\n                        Rarity\n                    </gs-col>\n                    <gs-col width = \"4\">\n                        <input value=\"{{form.Base.Rarity}}\" type=\"number\" min=\"1\" max=\"4\" required name=\"Rarity\" />\n                    </gs-col>\n                </gs-row>\n                <gs-row>\n                    <gs-col width=\"2\">\n                        Role\n                    </gs-col>\n                    <gs-col width = \"4\">\n                        <gs-col width = \"4\">\n                            <select name=\"Role\" required>\n                                <option selected value={{form.Base.Role}}>{{form.Names.RoleName}}</option>\n                                {{#each form.Roles}}\n                                    <option value={{@index}}>{{this.Name}}</option>\n                                {{/each}}\n                            </select>\n                        </gs-col>\n                    </gs-col>\n                </gs-row>\n                <gs-row>\n                    <gs-col width=\"2\">\n                        Range\n                    </gs-col>\n                    <gs-col width=\"4\" align=\"left\">\n                        <select name=\"Range\" required>\n                            <option value={{form.Base.Range}}>{{form.Names.Range}}</option>\n                            {{#each form.Ranges}}\n                                <option value={{@index}}>{{this.Name}}</option>\n                            {{/each}}\n                        </select>\n                    </gs-col>\n                </gs-row>\n            </gs-title-block>\n            <gs-title-block title=\"Statistics\">\n                <gs-row>\n                    <gs-col width=\"12\">\n                        Base Health and Power are calculated via rarity, role, and the stat ratio.\n                    </gs-col>\n                </gs-row>\n                <gs-row>\n                    <gs-col width=\"12\">\n                        Points (as of 2019/01/23): \n                            Common = 350, \n                            Rare = 360, \n                            Epic = 370, \n                            Legendary = 380\n                    </gs-col>\n                </gs-row>\n                <gs-row>\n                    <gs-col width=\"12\">\n                        Ratios (as of 2019/01/23):\n                            Melee: 4/6,\n                            Ranged: 3/7,\n                            Defense: 8/2,\n                            Support: 6/4\n                    </gs-col>\n                </gs-row>\n                <gs-row>\n                    <gs-col width=\"12\">\n                        Health = Round(((roleRatio/10) + statRatio) * points)\n                    </gs-col>\n                </gs-row>\n                <gs-row>\n                    <gs-col width=\"12\">\n                        Power = Round((((roleRatio/10) - statRatio) * points) / 15)\n                    </gs-col>\n                </gs-row>\n                <gs-row>\n                    <gs-col width=\"3\">\n                        Stat Ratio\n                    </gs-col>\n                    <gs-col width=\"4\">\n                        <input value=\"{{form.Base.StatRatio}}\" type=\"number\" min=\"-1\" max=\"1\" step=\"0.01\" required name=\"StatRatio\"/>\n                    </gs-col>\n                    <gs-col width=\"4\">\n                        (positive = health, negative = damage)\n                    </gs-col>\n                </gs-row>\n                <gs-row>\n                    <gs-col width=\"3\">\n                        Speed Modifier (not implemented)\n                    </gs-col>\n                    <gs-col width=\"4\">\n                        <input value=\"{{form.Base.SpeedModifier}}\" type=\"number\" min=\"-1\" max=\"1\" step=\"0.01\" name=\"SpeedModifier\"/>\n                    </gs-col>\n                    <gs-col width=\"4\">\n                        (positive = slower, negative = faster)\n                    </gs-col>\n                </gs-row>\n                <gs-row>\n                    <gs-col width=\"3\">\n                        Special Modifier (not implemented yet)\n                    </gs-col>\n                    <gs-col width=\"4\">\n                        Health %\n                    </gs-col>\n                    <gs-col width=\"4\">\n                        Power %\n                    </gs-col>\n                </gs-row>\n                <gs-row>\n                    <gs-col width=\"3\">\n                        \n                    </gs-col>\n                    <gs-col width=\"4\">\n                        <input value=\"{{form.Base.SpecialModifierHealth}}\" type=\"number\" name=\"SpecialModifierHealth\"/>\n                    </gs-col>\n                    <gs-col width=\"4\">\n                        <input value=\"{{form.Base.SpecialModifierPower}}\" type=\"number\" name=\"SpecialModifierPower\"/>\n                    </gs-col>\n                </gs-row>\n            </gs-title-block>\n            <gs-title-block title=\"Upgrades\">\n                <gs-row>\n                    <gs-col width=\"2\">\n                        1-5 (Common)\n                    </gs-col>\n                    <gs-col width=\"2\">\n                        Health:\n                    </gs-col>\n                    <gs-col width=\"2\">\n                        <input value=\"{{form.UpgradeData.Upgrade_1.Health}}\" type=\"number\" required name=\"UpgradeData_Health_1\"/>\n                    </gs-col>\n                    <gs-col width=\"2\">\n                        Power:\n                    </gs-col>\n                    <gs-col width=\"2\">\n                        <input value=\"{{form.UpgradeData.Upgrade_1.Power}}\" type=\"number\" required name=\"UpgradeData_Power_1\"/>\n                    </gs-col>\n                </gs-row>\n                <gs-row>\n                    <gs-col width=\"2\">\n                        6-9 (Rare)\n                    </gs-col>\n                    <gs-col width=\"2\">\n                    Health:\n                    </gs-col>\n                    <gs-col width=\"2\">\n                        <input value=\"{{form.UpgradeData.Upgrade_2.Health}}\" type=\"number\" required name=\"UpgradeData_Health_2\"/>\n                    </gs-col>\n                    <gs-col width=\"2\">\n                        Power:\n                    </gs-col>\n                    <gs-col width=\"2\">\n                        <input value=\"{{form.UpgradeData.Upgrade_2.Power}}\" type=\"number\" required name=\"UpgradeData_Power_2\"/>\n                    </gs-col>\n                </gs-row>\n                <gs-row>\n                    <gs-col width=\"2\">\n                        10-12 (Epic)\n                    </gs-col>\n                    <gs-col width=\"2\">\n                        Health:\n                    </gs-col>\n                    <gs-col width=\"2\">\n                        <input value=\"{{form.UpgradeData.Upgrade_3.Health}}\" type=\"number\" required name=\"UpgradeData_Health_3\"/>\n                    </gs-col>\n                    <gs-col width=\"2\">\n                        Power:\n                    </gs-col>\n                    <gs-col width=\"2\">\n                        <input value=\"{{form.UpgradeData.Upgrade_3.Power}}\" type=\"number\" required name=\"UpgradeData_Power_3\"/>\n                    </gs-col>\n                </gs-row>\n                <gs-row>\n                    <gs-col width=\"2\">\n                        13-14 (Legendary)\n                    </gs-col>\n                    <gs-col width=\"2\">\n                        Health:\n                    </gs-col>\n                    <gs-col width=\"2\">\n                        <input value=\"{{form.UpgradeData.Upgrade_4.Health}}\" type=\"number\" required name=\"UpgradeData_Health_4\"/>\n                    </gs-col>\n                    <gs-col width=\"2\">\n                        Power:\n                    </gs-col>\n                    <gs-col width=\"2\">\n                        <input value=\"{{form.UpgradeData.Upgrade_4.Power}}\" type=\"number\" required name=\"UpgradeData_Power_4\"/>\n                    </gs-col>\n                </gs-row>\n            </gs-title-block>\n            <gs-title-block title=\"Special\">\n                <gs-row>\n                    <gs-col width=\"2\">\n                        Name:\n                    </gs-col>\n                    <gs-col width=\"2\">\n                        <input value=\"{{form.Special.Name}}\" type=\"text\" required name=\"SpecialName\"/>\n                    </gs-col>\n                    <gs-col width=\"2\">\n                        Multiplier:\n                    </gs-col>\n                    <gs-col width=\"2\">\n                        <input value=\"{{form.Special.Multiplier}}\" type=\"number\" step=\"0.01\" required name=\"SpecialMultiplier\"/>\n                    </gs-col>\n                </gs-row>\n                <gs-row>\n                    <gs-col width=\"2\">\n                        Type:\n                    </gs-col>\n                    <gs-col width=\"4\" align=\"left\">\n                        <select name=\"SpecialType\" required>\n                            <option selected value={{form.Special.Type}}>{{form.Names.SpecialType}}</option>\n                            {{#each form.SpecialTypes}}\n                                <option value={{@index}}>{{this.Name}}</option>\n                            {{/each}}\n                        </select>\n                    </gs-col>\n                </gs-row>\n                <gs-row>\n                    <gs-col width=\"2\">\n                        TargetPattern:\n                    </gs-col>\n                    <gs-col width=\"4\" align=\"left\">\n                        <select name=\"SpecialTargetPattern\" required>\n                            <option selected value={{form.Special.TargetPattern}}>{{form.Names.SpecialTargetPattern}}</option>\n                            {{#each form.TargetPatterns}}\n                                <option value={{@index}}>{{this.Name}}</option>\n                            {{/each}}\n                        </select>\n                    </gs-col>\n                </gs-row>\n                <gs-row>\n                    <gs-col width=\"2\">\n                        StatusEffect:\n                    </gs-col>\n                    <gs-col width=\"4\" align=\"left\">\n                        <select name=\"SpecialStatusEffect\" required>\n                            <option selected value={{form.Special.StatusEffect}}>{{form.Names.SpecialStatusEffect}}</option>\n                            {{#each form.StatusEffects}}\n                                <option value={{@index}}>{{this.Name}}</option>\n                            {{/each}}\n                        </select>\n                    </gs-col>\n                </gs-row>\n            </gs-title-block>\n            {{#if form.New}}\n            \n            {{else}}\n            <gs-snippet snippet=\"Character_Stat_Calculator?CharacterId={{form.CharacterId}}\"></gs-snippet>\n            {{/if}}\n            <gs-row>\n                <gs-col width=\"4\" offset=\"1\">\n                {{#if form.updated}}\n                    {{#if form.success}}\n                        <gs-alert type=\"success\" message=\"Saved!\"></gs-alert>\n                    {{else}}\n                        <gs-alert type=\"error\" message=\"{{error}}\"></gs-alert>\n                    {{/if}}\n                {{/if}}\n                </gs-col>\n                <gs-col width=\"3\">\n                    <gs-submit>Save Changes</gs-submit>\n                </gs-col>\n                <gs-col width=\"1\">\n                    <gs-link snippet=\"Character_Details?action=exit\"><Button>Close</Button></gs-link>\n                </gs-col>\n            </gs-row>\n        </gs-form>\n    </gs-title-block>\n    \n    \n{{/if}}\n\n","groups":[]},"Character_Stat_Calculator":{"shortCode":"Character_Stat_Calculator","name":"Character: Stat Calculator","scriptData":"{\n    \n}","script":"Spark.setScriptData(\"form\", SnippetProcessor(Spark.getData().scriptData));\n\nfunction SnippetProcessor(data){\n    var form = {};\n    form.CharacterId = data.CharacterId;\n    return view(data);\n    \n    function view(data){\n        \n        return form;\n    }\n}","template":"<gs-title-block title=\"Character Stat Calculator\">\n    <gs-title-block title=\"Enter Character Level\">\n        <gs-form snippet=\"Character_Stat_Calculator_Details?CharacterId={{form.CharacterId}}&Level={{form.Level}}\" target=\"Stat_Calculator_Content\">\n            <gs-row>\n                <gs-col width=\"6\">\n                    Only works if character is saved<br>\n                </gs-col>\n            </gs-row>\n            <gs-row>\n                <gs-col width=\"2\">\n                    CharacterId\n                </gs-col>\n                <gs-col width=\"4\">\n                    {{#if form.CharacterId}}\n                        <input value=\"{{form.CharacterId}}\" type=\"number\" name=\"CharacterId\" disabled/>\n                    {{else}}\n                        <input value=\"1\" type=\"number\" name=\"CharacterId\"/>\n                    {{/if}}\n                </gs-col>\n            </gs-row>\n            <gs-row>\n                <gs-col width=\"2\">\n                    Level\n                </gs-col>\n                <gs-col width=\"4\">\n                    {{#if form.Level}}\n                        <input value=\"{{form.Level}}\" type=\"number\" name=\"Level\"/>\n                    {{else}}\n                        <input value=\"1\" type=\"number\" name=\"Level\"/>\n                    {{/if}}\n                </gs-col>\n            </gs-row>\n            <gs-row>\n                <gs-col width=\"2\">\n                    Detailed?\n                </gs-col>\n                <gs-col width=\"1\">\n                    <input type=\"checkbox\" name=\"Detailed\" value=\"true\">\n                </gs-col>\n            </gs-row>\n            <gs-row>\n                <gs-col width=\"12\">\n                    <gs-submit>Calculate Stats</gs-submit>\n                </gs-col>\n            </gs-row>\n        </gs-form>\n    </gs-title-block>\n    <gs-placeholder id=\"Stat_Calculator_Content\"></gs-placeholder>\n</gs-title-block>\n\n","groups":[]},"Character_Stat_Calculator_Details":{"shortCode":"Character_Stat_Calculator_Details","name":"Character: Stat Calculator Details","scriptData":"{\n    \"CharacterId\": 5,\n    \"Level\": 1,\n    \"Detailed\": \"true\"\n}","script":"Spark.setScriptData(\"form\", SnippetProcessor(Spark.getData().scriptData));\n\nfunction SnippetProcessor(data){\n    var metaData = GetMetaData();\n\n    var form = {};\n    var CharacterId = data.CharacterId;\n    var Level = data.Level;\n    var Detailed = data.Detailed;\n    form.CharacterId = CharacterId;\n    form.Level = Level;\n    form.Detailed = Detailed;\n    \n    return view(data);\n    \n    function view(data){\n        var character = GetCharacterData(CharacterId);\n        var levelTable = GetLevelTable(character.Base.Rarity);\n        var basePoints = levelTable.Levels[Level].Total;\n        var ratio = metaData.Configs.Roles[character.Base.Role].Ratio;\n        var statRatio = character.Base.StatRatio;\n        //Health = Round(((roleRatio/10) + statRatio) * points)\n        //Power = Round((((roleRatio/10) - statRatio) * points) / 15)\n        var health = Math.round(((ratio.Health/10) + statRatio) * basePoints);\n        var power = Math.round((((ratio.Power/10) - statRatio) * basePoints) / 15);\n        var DPS = power / character.Base.Speed;\n        var SpecialPower = Math.round(power * character.Special.Multiplier);\n        \n        form.Health = health;\n        form.Power = power;\n        form.DPS = DPS;\n        form.SpecialPower = SpecialPower;\n        form.SpecialMultiplier = character.Special.Multiplier;\n        \n        if(Detailed === \"true\"){\n            form.BasePoints = basePoints;\n            form.Role = GetRoleName(character.Base.Role);\n            var updatedStatRatio = {\n                \"Health\": ratio.Health + statRatio,\n                \"Power\": ratio.Power - statRatio\n            };\n            form.StatRatio = statRatio;\n            form.Ratio = updatedStatRatio;\n        }\n        \n        return form;\n    }\n    \n    function GetCharacterData(characterId){\n        //Load API and get entry\n        var API = Spark.getGameDataService();\n        \n        //Attempt to get entry\n        var entryObject = API.getItem(\"Characters\", characterId);\n        \n        //If error attempting to retrieve entry\n        if(entryObject.error()){\n            Spark.setScriptError(\"ERROR\", entryObject.error());\n            Spark.exit();\n        } else {\n            //Get entry\n            var entry = entryObject.document();\n            //Access Data\n            var entryData = entry.getData();\n            \n            return entryData;\n        }\n    }\n    \n    function GetMetaData() {\n        //Load API and get entry\n        var API = Spark.getGameDataService();\n        \n        //Attempt to get entry\n        var entryObject = API.getItem(\"MetaData\", \"Character\");\n        \n        //If error attempting to retrieve entry\n        if(entryObject.error()){\n            Spark.setScriptError(\"ERROR\", entryObject.error());\n            Spark.exit();\n        } else {\n            //Get entry\n            var entry = entryObject.document();\n            //Access Data\n            var entryData = entry.getData();\n            \n            return entryData;\n        }\n    }\n    \n    function GetLevelTable(tableId){\n        //Load API and get entry\n        var API = Spark.getGameDataService();\n        \n        //Attempt to get entry\n        var entryObject = API.getItem(\"MetaData\", \"CharacterLevel\" + tableId.toString());\n        \n        //If error attempting to retrieve entry\n        if(entryObject.error()){\n            Spark.setScriptError(\"ERROR\", entryObject.error());\n            Spark.exit();\n        } else {\n            //Get entry\n            var entry = entryObject.document();\n            //Access Data\n            var entryData = entry.getData();\n            \n            return entryData;\n        }\n    }\n    \n    function GetRoleName(role){\n        return metaData.Configs.Roles[role].Name;\n    }\n}","template":"<gs-title-block title=\"Character Stats\">\n    {{#if form.Detailed}}\n        <gs-row>\n            <gs-col width=\"3\">Base Points:</gs-col>\n            <gs-col width=\"2\">{{form.BasePoints}}</gs-col>\n        </gs-row>\n        <gs-row>\n            <gs-col width=\"3\">Stat Ratio:</gs-col>\n            <gs-col width=\"2\">{{form.StatRatio}}</gs-col>\n        </gs-row>\n        <gs-row>\n            <gs-col width=\"3\">Role:</gs-col>\n            <gs-col width=\"2\">{{form.Role}}</gs-col>\n        </gs-row>\n        <gs-row>\n            <gs-col width=\"3\">Ratio:</gs-col>\n            <gs-col width=\"2\">Health:</gs-col>\n            <gs-col width=\"2\">{{form.Ratio.Health}}</gs-col>\n            <gs-col width=\"2\">Power</gs-col>\n            <gs-col width=\"2\">{{form.Ratio.Power}}</gs-col>\n        </gs-row>\n    {{/if}}\n    <gs-row>\n        <gs-col width=\"3\">Health:</gs-col>\n        <gs-col width=\"2\">{{form.Health}}</gs-col>\n    </gs-row>\n    <gs-row>\n        <gs-col width=\"3\">Power:</gs-col>\n        <gs-col width=\"2\">{{form.Power}}</gs-col>\n    </gs-row>\n    <gs-row>\n        <gs-col width=\"3\">Special Power:</gs-col>\n        <gs-col width=\"2\">{{form.SpecialPower}}</gs-col>\n        <gs-col width=\"2\">{{form.SpecialMultiplier}}x</gs-col>\n    </gs-row>\n    <gs-row>\n        <gs-col width=\"3\">Damage Per Second:</gs-col>\n        <gs-col width=\"2\">{{form.DPS}}</gs-col>\n    </gs-row>\n</gs-title-block>","groups":[]},"Gacha_Featured_Pool_Manager":{"shortCode":"Gacha_Featured_Pool_Manager","name":"Gacha: Featured Pool Manager","scriptData":"{\n    \"action\": \"view\",\n    \"GachaType\": \"Scheduled\",\n    \"GachaId\": \"2\",\n    \"Name\": \"Zero Pool\",\n    \"DateStart\": \"Fri Feb 01 2019\",\n    \"DateEnd\": \"Fri Feb 10 2019\"\n}","script":"Spark.setScriptData(\"form\", SnippetProcessor(Spark.getData().scriptData));\n\nfunction SnippetProcessor(data){\n    \n    var form = {};\n    form.GachaType = data.GachaType;\n    form.GachaId = data.GachaId;\n    \n    switch(data.action){\n        case \"view\":\n            return view(data);\n        case \"viewNew\":\n            return viewNew(data);\n        case \"create\":\n            return create(data);\n        case \"update\":\n            return update(data);\n        case \"exit\":\n            return exit(data);\n        case \"exitNew\":\n            return exitNew(data);\n    }\n    \n    function view(data){\n        var entryData = GetGacha(data.GachaId);\n        \n        if(entryData.error !== undefined || entryData.error !== null){\n            form.error = entryData.error;\n        }\n        \n        form.data = entryData;\n            \n        entryData.DateStart = new Date(entryData.DateStart).toDateString();\n        entryData.DateEnd = new Date(entryData.DateEnd).toDateString();\n        \n        var gachaTickets = GetGachaTicketsList();\n        for(var i = 0; i < gachaTickets.length; i++){\n            if(gachaTickets[i].ShortCode === entryData.ItemCost){\n                gachaTickets[i].Selected = true;\n            }\n        }\n        \n        form.GachaTickets = gachaTickets;\n        \n        \n        form.today = new Date().toDateString();\n        form.data = entryData;\n        \n        return form;\n    }\n    \n    function viewNew(data){\n        form.today = new Date().toDateString();\n        form.new = true;\n        var gachaMetaData = GetGachaMetaData();\n        \n        var gachaTickets = GetGachaTicketsList();\n        for(var i = 0; i < gachaTickets.length; i++){\n            if(gachaTickets[i].ShortCode === \"Gacha_Ticket_2\"){\n                gachaTickets[i].Selected = true;\n            }\n        }\n        \n        form.GachaTickets = gachaTickets;\n        \n        form.data = {\n            \"Id\": gachaMetaData.ScheduledCount + 1\n        };\n        return form;\n    }\n    \n    function create(data){\n        var parse = data.ItemCost.split(\"|\");\n        var updatedData = {\n            \"Name\": data.Name,\n            \"DateStart\": data.DateStart,\n            \"DateEnd\": data.DateEnd,\n            \"ItemCost\": parse[0],\n            \"ItemCostName\": parse[1]\n        };\n        \n        var entryData = CreateGacha(updatedData);\n        \n        entryData.DateStart = new Date(entryData.DateStart).toDateString();\n        entryData.DateEnd = new Date(entryData.DateEnd).toDateString();\n        form.data = entryData;\n        \n        form.GachaType = entryData.Type;\n        form.GachaId = entryData.Id;\n        \n        form.created = true;\n        return view(data);\n    }\n    \n    function update(data){\n        var parse = data.ItemCost.split(\"|\");\n        var updatedData = {\n            \"Name\": data.Name,\n            \"DateStart\": data.DateStart,\n            \"DateEnd\": data.DateEnd,\n            \"ItemCost\": parse[0],\n            \"ItemCostName\": parse[1]\n        };\n        var entryData = UpdateGacha(data.GachaId, updatedData);\n        form.data = entryData;\n        \n        form.updated = true;\n        return view(data);\n    }\n    \n    function exit(data){\n        form.data = {};\n        form.data.Id = data.GachaId;\n        form.exit = true;\n        return form;\n    }\n    \n    function exitNew(data){\n        form.exitNew = true;\n        return form;\n    }\n    \n    function GetGacha(gachaId){\n        //Load API and get entry\n        var API = Spark.getGameDataService();\n        \n        //Attempt to get entry\n        var entryObject = API.getItem(\"Gacha\", \"Scheduled-\" + gachaId);\n        \n        //If error attempting to retrieve entry\n        if(entryObject.error()){\n            Spark.setScriptError(\"ERROR\", entryObject.error());\n            Spark.exit();\n        } else {\n            //Get entry\n            var entry = entryObject.document();\n            //Access Data\n            var entryData = entry.getData();\n            \n            return entryData;\n        }\n    }\n    \n    function UpdateGacha(gachaId, gachaData){\n        //Load API and get entry\n        var API = Spark.getGameDataService();\n        \n        //Attempt to get entry\n        var entryObject = API.getItem(\"Gacha\", \"Scheduled-\" + gachaId);\n        \n        //If error attempting to retrieve entry\n        if(entryObject.error()){\n            Spark.setScriptError(\"ERROR\", entryObject.error());\n            Spark.exit();\n        } else {\n            //Get entry\n            var entry = entryObject.document();\n            //Access Data\n            var entryData = entry.getData();\n            \n            entryData.Name = gachaData.Name;\n            entryData.DateStart = new Date(gachaData.DateStart).toISOString();\n            entryData.DateEnd = new Date(gachaData.DateEnd).toISOString();\n            entryData.ItemCost = gachaData.ItemCost;\n            entryData.ItemCostName = gachaData.ItemCostName;\n            \n            //Persist and return any errors\n            var entryStatus = entry.persistor().persist().error();\n            \n            //If there are errors the entry would not persist and we can act on that information\n            if(entryStatus){\n                //Output error script\n                Spark.setScriptError(\"ERROR\", entryStatus);\n                entryData.error = entryStatus;\n            }\n            \n            return entryData;\n        }\n    }\n    \n    function CreateGacha(gachaData){\n        //Create entry and get its data object\n        var API = Spark.getGameDataService();\n        \n        var gachaMetaData = IncrementScheduledPoolCount();\n        var gachaId = gachaMetaData.ScheduledCount;\n        \n        var entry = API.createItem(\"Gacha\", \"Scheduled-\" + gachaId);\n        \n        //Get the data object where custom data is stored\n        //Access Data\n        var entryData = entry.getData();\n        \n        entryData.Type = \"Scheduled\";\n        entryData.Id = Number(gachaId);\n        entryData.CreationDate = new Date().toISOString();\n        entryData.Name = gachaData.Name;\n        entryData.DateStart = new Date(gachaData.DateStart).toISOString();\n        entryData.DateEnd = new Date(gachaData.DateEnd).toISOString();\n        entryData.Pools = [];\n        entryData.ItemCost = gachaData.ItemCost;\n        entryData.ItemCostName = gachaData.ItemCostName;\n        \n        //Persist and return any errors\n        var entryStatus = entry.persistor().persist().error();\n        \n        //If there are errors the entry would not persist and we can act on that information\n        if(entryStatus){\n            //Output error script\n            Spark.setScriptError(\"ERROR\", entryStatus);\n            entryData.error = entryStatus;\n        }\n        \n        return entryData;\n    }\n    \n    function GetGachaMetaData(){\n        //Load API and get entry\n        var API = Spark.getGameDataService();\n        \n        //Attempt to get entry\n        var entryObject = API.getItem(\"MetaData\", \"Gacha\");\n        \n        //If error attempting to retrieve entry\n        if(entryObject.error()){\n            Spark.setScriptError(\"ERROR\", entryObject.error());\n            Spark.exit();\n        } else {\n            //Get entry\n            var entry = entryObject.document();\n            //Access Data\n            var entryData = entry.getData();\n            \n            return entryData;\n        }\n    }\n    \n    function IncrementScheduledPoolCount(){\n        //Load API and get entry\n        var API = Spark.getGameDataService();\n        \n        //Attempt to get entry\n        var entryObject = API.getItem(\"MetaData\", \"Gacha\");\n        \n        //If error attempting to retrieve entry\n        if(entryObject.error()){\n            Spark.setScriptError(\"ERROR\", entryObject.error());\n            Spark.exit();\n        } else {\n            //Get entry\n            var entry = entryObject.document();\n            //Access Data\n            var entryData = entry.getData();\n            \n            entryData.ScheduledCount = entryData.ScheduledCount + 1;\n            \n            //Persist and return any errors\n            var entryStatus = entry.persistor().persist().error();\n            \n            //If there are errors the entry would not persist and we can act on that information\n            if(entryStatus){\n                //Output error script\n                Spark.setScriptError(\"ERROR\", entryStatus);\n                entryData.error = entryStatus;\n            }\n            \n            return entryData;\n        }\n    }\n    \n    function GetGachaTicketsList(){\n        var config = Spark.getConfig();\n        var vGoods = config.getVirtualGoods();\n        var gachaTickets = [];\n        for(var i = 0; i < vGoods.length; i++){\n            var propertySet = vGoods[i].getPropertySet();\n            if(propertySet.ItemType.Type == \"GachaTicket\"){\n                gachaTickets.push({\n                    \"Name\": vGoods[i].name,\n                    \"ShortCode\": vGoods[i].shortCode\n                });\n            }\n        }\n        \n        return gachaTickets;\n    }\n}\n\n","template":"{{#if form.exitNew}}\n    <gs-modal-close></gs-modal-close>\n    <gs-snippet snippet=\"Gacha_List?action=view\" target=\"content\"></gs-snippet>\n{{else if form.exit}}\n    <gs-modal-close></gs-modal-close>\n    <gs-snippet snippet=\"Gacha_Pool_Details?action=view&GachaType=Scheduled&GachaId={{form.data.Id}}\" target=\"content\"></gs-snippet>\n{{else}}\n<gs-title-block \n    {{#if form.new}}\n    title=\"New Pool\"\n    {{else}}\n    title=\"{{form.data.Name}}\"\n    {{/if}}\n>\n    <gs-row>\n        <gs-col width=\"2\">Today's Date: </gs-col>\n        <gs-col width=\"4\">{{form.today}}</gs-col>\n    </gs-row>\n    <gs-form \n        {{#if form.new}}\n            snippet=\"Gacha_Featured_Pool_Manager?action=create&GachaId={{form.data.Id}}\"\n        {{else}}\n            snippet=\"Gacha_Featured_Pool_Manager?action=update&GachaId={{form.data.Id}}\"\n        {{/if}}\n        target=\"modal-small\"\n    >\n        <gs-row>\n            <gs-col width=\"2\">\n                Item Cost:\n            </gs-col>\n            <gs-col width=\"4\">\n                <select name=\"ItemCost\">\n                    {{#each form.GachaTickets}}\n                    <option value=\"{{this.ShortCode}}|{{this.Name}}\" {{#if this.Selected}} selected {{/if}}>{{this.Name}}</option>\n                    {{/each}}\n                </select>\n            </gs-col>\n        </gs-row>\n        <gs-row>\n            <gs-col width=\"1\">\n                Id\n            </gs-col>\n            <gs-col width=\"2\">\n                Status\n            </gs-col>\n            <gs-col width=\"3\">\n                Name\n            </gs-col>\n            <gs-col width=\"3\">\n                Start Date\n            </gs-col>\n            <gs-col width=\"3\">\n                End Date\n            </gs-col>\n        </gs-row>\n        <gs-row>\n            <gs-col width=\"1\">\n                {{form.data.Id}}\n            </gs-col>\n            <gs-col width=\"2\">\n                {{form.data.Status}}\n            </gs-col>\n            <gs-col width=\"3\">\n                <input type=\"text\" value=\"{{form.data.Name}}\" name=\"Name\" required>\n            </gs-col>\n            <gs-col width=\"3\">\n                <input type=\"text\" value=\"{{form.data.DateStart}}\" name=\"DateStart\" class=\"datepicker\" id=\"DateStart\" required>\n            </gs-col>\n            <gs-col width=\"3\">\n                <input type=\"text\" value=\"{{form.data.DateEnd}}\" name=\"DateEnd\" class=\"datepicker\" id=\"DateEnd\" required>\n            </gs-col>\n        </gs-row>\n        <br>\n        <gs-row>\n            <gs-col width=\"6\"></gs-col>\n            {{#if form.new}}\n            <gs-col width=\"2\">\n                <gs-submit>Create</gs-submit>\n            </gs-col>\n            <gs-col width=\"2\">\n                <gs-link snippet=\"Gacha_Featured_Pool_Manager?action=exitNew\"><Button>Close</Button></gs-link>\n            </gs-col>\n            {{else}}\n            <gs-col width=\"2\">\n                <gs-submit>Save Changes</gs-submit>\n            </gs-col>\n            <gs-col width=\"2\">\n                <gs-link snippet=\"Gacha_Featured_Pool_Manager?action=exit&GachaId={{form.data.Id}}\"><Button>Close</Button></gs-link>\n            </gs-col>\n            {{/if}}\n        </gs-row>\n    </gs-form>\n    {{#if form.updated}}\n        <gs-row>\n            <gs-col width=\"6\">\n                \n            </gs-col>\n            <gs-col width=\"6\">\n                <gs-alert type=\"success\" message=\"Update Success\"></gs-alert>\n            </gs-col>\n        </gs-row>\n    {{else if form.created}}\n        <gs-row>\n            <gs-col width=\"6\">\n                \n            </gs-col>\n            <gs-col width=\"6\">\n                <gs-alert type=\"success\" message=\"Create new pool Success\"></gs-alert>\n            </gs-col>\n        </gs-row>\n    {{/if}}\n    \n    {{#if form.error}}\n        <gs-row>\n            <gs-col width=\"6\">\n                \n            </gs-col>\n            <gs-col width=\"2\">\n                <gs-alert type=\"error\" message={{form.error}}/>\n            </gs-col>\n        </gs-row>\n    {{/if}}\n</gs-title-block>\n{{/if}}\n\n<script>\n    setTimeout(function(){\n        $('.datepicker').datepicker({\n            dateFormat:\"D M dd yy\",\n            separator:\"T\",\n            timeFormat: 'HH:mm'\n        });\n    }, 500);\n</script>\n    \n    ","groups":[]},"Gacha_List":{"shortCode":"Gacha_List","name":"Gacha List","scriptData":"{\n    \"action\": \"view\"\n}","script":"Spark.setScriptData(\"form\", SnippetProcessor(Spark.getData().scriptData));\n\nfunction SnippetProcessor(data){\n    \n    var form = {};\n    \n    switch(data.action){\n        case \"view\":\n            return view(data);\n        case \"viewSorted\":\n            return viewSorted(data);\n    }\n    \n    function view(data){\n        var entryData = GetScheduledGachas();\n        var permanentPools = GetPermanentGachas();\n        \n        form.PermanentPools = permanentPools;\n        for(var i = 0; i < entryData.length; i++){\n            entryData[i].DateStart = new Date(entryData[i].DateStart).toDateString();\n            entryData[i].DateEnd = new Date(entryData[i].DateEnd).toDateString();\n        }\n        \n        \n        form.today = new Date().toDateString();\n        form.data = entryData;\n        \n        return form;\n    }\n    \n    function viewSorted(data){\n        switch(data.sortType){\n            case \"sort_scheduled\":\n                return view(data);\n            case \"sort_live\":\n                return viewLive(data);\n            case \"sort_expired\":\n                return viewExpired(data);\n        }\n    }\n    \n    function viewLive(data){\n        var entryData = GetLiveGachas();\n        for(var i = 0; i < entryData.length; i++){\n            entryData[i].DateStart = new Date(entryData[i].DateStart).toDateString();\n            entryData[i].DateEnd = new Date(entryData[i].DateEnd).toDateString();\n        }\n        \n        var permanentPools = GetPermanentGachas();\n        \n        form.PermanentPools = permanentPools;\n        for(i = 0; i < entryData.length; i++){\n            entryData[i].DateStart = new Date(entryData[i].DateStart).toDateString();\n            entryData[i].DateEnd = new Date(entryData[i].DateEnd).toDateString();\n        }\n        \n        \n        form.today = new Date().toDateString();\n        form.data = entryData;\n        form.Live = true;\n        return form;\n    }\n    \n    function viewExpired(data){\n        var entryData = GetExpiredGachas();\n        for(var i = 0; i < entryData.length; i++){\n            entryData[i].DateStart = new Date(entryData[i].DateStart).toDateString();\n            entryData[i].DateEnd = new Date(entryData[i].DateEnd).toDateString();\n        }\n        \n        var permanentPools = GetPermanentGachas();\n        \n        form.PermanentPools = permanentPools;\n        for(i = 0; i < entryData.length; i++){\n            entryData[i].DateStart = new Date(entryData[i].DateStart).toDateString();\n            entryData[i].DateEnd = new Date(entryData[i].DateEnd).toDateString();\n        }\n        \n        \n        form.today = new Date().toDateString();\n        form.data = entryData;\n        \n        form.Expired = true;\n        return form;\n    }\n    \n    function GetScheduledGachas(){\n        //Load API and get entry\n        var API = Spark.getGameDataService();\n    \n        var condition = API.S(\"Type\").eq(\"Scheduled\").and(API.N(\"Id\").gt(0)).and(API.S(\"DateEnd\").gt(new Date().toISOString()));\n        var sortOrder = API.sort(\"DateStart\", true);\n        var query = API.queryItems(\"Gacha\", condition, sortOrder);\n        \n        if(query.error()){\n            //Output error script\n            Spark.setScriptError(\"ERROR\", query.error());\n            //Stop execution of script\n            Spark.exit();    \n        } else{\n             //Create empty object\n            var object = [];\n            //While there are still entries in the cursor retrieved from query\n            while(query.cursor().hasNext()){\n                //Get the entry\n                entry = query.cursor().next();\n                //Populate object with the entries. key = entry ID\n                entryData = entry.getData();\n                \n                object.push(entryData);\n            }\n            return object;\n        }\n        \n    }\n    \n    function GetPermanentGachas() {\n        //Load API and get entry\n        var API = Spark.getGameDataService();\n    \n        var condition = API.S(\"Type\").eq(\"Permanent\");\n        var sortOrder = API.sort(\"Id\", true);\n        var query = API.queryItems(\"Gacha\", condition, sortOrder);\n        \n        if(query.error()){\n            //Output error script\n            Spark.setScriptError(\"ERROR\", query.error());\n            //Stop execution of script\n            Spark.exit();    \n        } else{\n             //Create empty object\n            var object = [];\n            //While there are still entries in the cursor retrieved from query\n            while(query.cursor().hasNext()){\n                //Get the entry\n                entry = query.cursor().next();\n                //Populate object with the entries. key = entry ID\n                entryData = entry.getData();\n                \n                object.push(entryData);\n            }\n            return object;\n        }\n        \n    }\n    \n    function GetLiveGachas(){\n        //Load API and get entry\n        var API = Spark.getGameDataService();\n    \n        var condition = API.S(\"Type\").eq(\"Scheduled\").and(API.N(\"Id\").gt(0)).and(API.S(\"DateStart\").lt(new Date().toISOString())).and(API.S(\"DateEnd\").gt(new Date().toISOString()));\n        var sortOrder = API.sort(\"DateStart\", true);\n        var query = API.queryItems(\"Gacha\", condition, sortOrder);\n        \n        if(query.error()){\n            //Output error script\n            Spark.setScriptError(\"ERROR\", query.error());\n            //Stop execution of script\n            Spark.exit();    \n        } else{\n             //Create empty object\n            var object = [];\n            //While there are still entries in the cursor retrieved from query\n            while(query.cursor().hasNext()){\n                //Get the entry\n                entry = query.cursor().next();\n                //Populate object with the entries. key = entry ID\n                entryData = entry.getData();\n                \n                object.push(entryData);\n            }\n            return object;\n        }\n        \n    }\n    \n    function GetExpiredGachas(){\n        //Load API and get entry\n        var API = Spark.getGameDataService();\n    \n        var condition = API.S(\"Type\").eq(\"Scheduled\").and(API.N(\"Id\").gt(0)).and(API.S(\"DateEnd\").lt(new Date().toISOString()));\n        var sortOrder = API.sort(\"DateStart\", true);\n        var query = API.queryItems(\"Gacha\", condition, sortOrder);\n        \n        if(query.error()){\n            //Output error script\n            Spark.setScriptError(\"ERROR\", query.error());\n            //Stop execution of script\n            Spark.exit();    \n        } else{\n             //Create empty object\n            var object = [];\n            //While there are still entries in the cursor retrieved from query\n            while(query.cursor().hasNext()){\n                //Get the entry\n                entry = query.cursor().next();\n                //Populate object with the entries. key = entry ID\n                entryData = entry.getData();\n                \n                object.push(entryData);\n            }\n            return object;\n        }\n    }\n}","template":"<br>\n<gs-title-block title=\"Permanent Pools\" width=\"11\">\n    <gs-row>\n        <gs-col width=\"1\">\n            ShortCode\n        </gs-col>\n        <gs-col width=\"2\">\n            Name\n        </gs-col>\n        <gs-col width=\"2\">\n            Item Cost\n        </gs-col>\n        <gs-col width=\"4\">\n            <gs-link snippet=\"Gacha_Permanent_Pool_Manager?action=viewNew&GachaType=Permanent\" target=\"modal-small\"><Button>Add new pool</Button></gs-link>\n        </gs-col>\n    </gs-row>\n    {{#each form.PermanentPools}}\n    <gs-row>\n        <gs-col width=\"1\">{{this.Type}}-{{this.Id}}</gs-col>\n        <gs-col width=\"2\">{{this.Name}}</gs-col>\n        <gs-col width=\"2\">{{this.ItemCostName}}</gs-col>\n        <gs-col width=\"3\"></gs-col>\n        <gs-col width=\"2\"><gs-link snippet=\"Gacha_Pool_Details?action=view&GachaType=Permanent&GachaId={{this.Id}}\" target=\"content\"><Button>View</Button></gs-link></gs-col>\n        <gs-col width=\"2\"><gs-link snippet=\"Gacha_Permanent_Pool_Manager?action=viewDelete&GachaType=Permanent&GachaId={{this.Id}}\" target=\"modal-small\"><Button>Delete</Button></gs-link></gs-col>\n    </gs-row>\n    {{/each}}\n</gs-title-block>\n<gs-title-block title=\"Featured Pools\" width=\"11\">\n    <br>\n    <gs-row>\n        <gs-form snippet=\"Gacha_List?action=viewSorted\" target=\"content\">\n            <gs-row>\n                <gs-col width=\"2\"></gs-col>\n                <gs-col width=\"4\">\n                    <select name=\"sortType\">\n                        <option value=\"sort_scheduled\">Scheduled</option>\n                        <option value=\"sort_live\" {{#if form.Live}} selected {{/if}}>Live</option>\n                        <option value=\"sort_expired\" {{#if form.Expired}} selected {{/if}}>Expired</option>\n                    </select>\n                </gs-col>\n                <gs-col width=\"2\"></gs-col>\n                <gs-col width=\"2\">\n                    <gs-submit>Sort</gs-submit>\n                </gs-col>\n                <gs-col width=\"2\"><gs-link snippet=\"Gacha_Featured_Pool_Manager?action=viewNew\" target=\"modal-small\"><Button>Add new</Button></gs-link></gs-col>\n            </gs-row>\n        </gs-form>\n    </gs-row>\n    <gs-row>\n        <gs-col width=\"1\">\n            ShortCode\n        </gs-col>\n        <gs-col width=\"2\">\n            Name\n        </gs-col>\n        <gs-col width=\"2\">\n            Item Cost\n        </gs-col>\n        <gs-col width=\"2\">\n            Start Date\n        </gs-col>\n        <gs-col width=\"2\">\n            End Date\n        </gs-col>\n        <gs-col width=\"2\">\n            \n        </gs-col>\n    </gs-row>\n    {{#each form.data}}\n    <gs-row>\n        <gs-col width=\"1\">\n            {{this.Type}}-{{this.Id}}\n        </gs-col>\n        <gs-col width=\"2\">\n            {{this.Name}}\n        </gs-col>\n        <gs-col width=\"2\">\n            {{this.ItemCostName}}\n        </gs-col>\n        <gs-col width=\"2\">\n            {{this.DateStart}}\n        </gs-col>\n        <gs-col width=\"2\">\n            {{this.DateEnd}}\n        </gs-col>\n        <gs-col width=\"2\">\n            <gs-link snippet=\"Gacha_Pool_Details?action=view&GachaType=Scheduled&GachaId={{this.Id}}\" target=\"content\">\n                <Button>View</Button>\n            </gs-link>\n        </gs-col>\n    </gs-row>\n    {{/each}}\n    <br>\n</gs-title-block>\n\n\n<br>","groups":[]},"Gacha_Master":{"shortCode":"Gacha_Master","name":"Gacha Master","scriptData":"","script":"Spark.setScriptData(\"form\", SnippetProcessor(Spark.getData().scriptData))\n\nfunction SnippetProcessor(data){\n    \n    var form = {};\n    return view(data);\n    \n    function view(data){\n        return form;\n    }\n}\n","template":"<gs-row>\n    <gs-col width=\"12\">\n        <gs-placeholder id=\"content\">\n            <gs-snippet snippet=\"Gacha_List?action=view\"></gs-snippet>\n        </gs-placeholder>\n    </gs-col>\n</gs-row>\n","groups":[]},"Gacha_Permanent_Pool_Manager":{"shortCode":"Gacha_Permanent_Pool_Manager","name":"Gacha: Permanent Pool Manager","scriptData":"{\n    \"action\": \"view\",\n    \"GachaType\": \"Permanent\",\n    \"GachaId\": \"1\"\n}","script":"Spark.setScriptData(\"form\", SnippetProcessor(Spark.getData().scriptData));\n\nfunction SnippetProcessor(data){\n    \n    var form = {};\n    form.GachaType = data.GachaType;\n    form.GachaId = data.GachaId;\n    \n    switch(data.action){\n        case \"view\":\n            return view(data);\n        case \"viewNew\":\n            return viewNew(data);\n        case \"viewDelete\":\n            return viewDelete(data);\n        case \"create\":\n            return create(data);\n        case \"update\":\n            return update(data);\n        case \"delete\":\n            return deleteItem(data);\n        case \"exit\":\n            return exit(data);\n        case \"exitNew\":\n            return exitNew(data);\n    }\n    \n    function view(data){\n        var entryData = GetGacha(data.GachaId);\n        \n        var gachaTickets = GetGachaTicketsList();\n        for(var i = 0; i < gachaTickets.length; i++){\n            if(gachaTickets[i].ShortCode === entryData.ItemCost){\n                gachaTickets[i].Selected = true;\n            }\n        }\n        \n        form.data = entryData;\n        form.GachaId = data.GachaId;\n        form.GachaTickets = gachaTickets;\n        \n        return form;\n    }\n    \n    function viewNew(data){\n        var gachaMetaData = GetGachaMetaData();\n        form.GachaId = gachaMetaData.PermanentCount;\n        var gachaTickets = GetGachaTicketsList();\n        for(var i = 0; i < gachaTickets.length; i++){\n            if(gachaTickets[i].ShortCode === \"Gacha_Ticket_2\"){\n                gachaTickets[i].Selected = true;\n            }\n        }\n        \n        form.GachaTickets = gachaTickets;\n        form.new = true;\n        \n        return form;\n    }\n    \n    function viewDelete(data){\n        var entryData = GetGacha(data.GachaId);\n        \n        var gachaTickets = GetGachaTicketsList();\n        for(var i = 0; i < gachaTickets.length; i++){\n            if(gachaTickets[i].ShortCode === entryData.ItemCost){\n                gachaTickets[i].Selected = true;\n            }\n        }\n        \n        form.GachaId = data.GachaId;\n        form.data = entryData;\n        form.GachaTickets = gachaTickets;\n        form.delete = true;\n        return form;\n    }\n    \n    function create(data){\n        var parse = data.ItemCost.split(\"|\");\n        \n        var entryData = CreatePermanentPool(data.Name, parse[0], parse[1]);\n        \n        data.GachaType = entryData.Type;\n        data.GachaId = entryData.Id;\n        \n        form.created = true;\n        return view(data);\n    }\n    \n    function update(data){\n        var parse = data.ItemCost.split(\"|\");\n        var entryData = UpdatePermanentPool(data.GachaId, data.Name, parse[0], parse[1]);\n        form.updated = true;\n        return view(data);\n    }\n    \n    function deleteItem(data){\n        DeletePermanentPool(data.GachaId);\n        form.exitNew = true;\n        return form;\n    }\n    \n    function exit(data){\n        form.exit = true;\n        return form;\n    }\n    \n    function exitNew(data){\n        form.exitNew = true;\n        return form;\n    }\n    \n    \n    function CreatePermanentPool(GachaName, ItemCost, ItemCostName){\n        //Create entry and get its data object\n        var API = Spark.getGameDataService();\n        \n        var gachaMetaData = IncrementPermanentPoolCount();\n        var gachaId = gachaMetaData.PermanentCount;\n        \n        var entry = API.createItem(\"Gacha\", \"Permanent-\" + gachaId);\n        \n        //Get the data object where custom data is stored\n        //Access Data\n        var entryData = entry.getData();\n        \n        entryData.Type = \"Permanent\";\n        entryData.Id = gachaId;\n        entryData.Name = GachaName;\n        entryData.Pools = [];\n        entryData.ItemCost = ItemCost;\n        entryData.ItemCostName = ItemCostName;\n        entryData.CreationDate = new Date().toISOString();\n        //Persist and return any errors\n        var entryStatus = entry.persistor().persist().error();\n        \n        //If there are errors the entry would not persist and we can act on that information\n        if(entryStatus){\n            //Output error script\n            Spark.setScriptError(\"ERROR\", entryStatus);\n            entryData.error = entryStatus;\n        }\n        \n        return entryData;\n    }\n    \n    function UpdatePermanentPool(GachaId, GachaName, ItemCost, ItemCostName){\n        //Load API and get entry\n        var API = Spark.getGameDataService();\n        \n        //Attempt to get entry\n        var entryObject = API.getItem(\"Gacha\", \"Permanent-\" + GachaId);\n        \n        //If error attempting to retrieve entry\n        if(entryObject.error()){\n            Spark.setScriptError(\"ERROR\", entryObject.error());\n            Spark.exit();\n        } else {\n            //Get entry\n            var entry = entryObject.document();\n            //Access Data\n            var entryData = entry.getData();\n            \n            entryData.Name = GachaName;\n            entryData.ItemCost = ItemCost;\n            entryData.ItemCostName = ItemCostName;\n            \n            //Persist and return any errors\n            var entryStatus = entry.persistor().persist().error();\n            \n            //If there are errors the entry would not persist and we can act on that information\n            if(entryStatus){\n                //Output error script\n                Spark.setScriptError(\"ERROR\", entryStatus);\n                entryData.error = entryStatus;\n            }\n            \n            return entryData;\n        }\n    }\n    \n    function DeletePermanentPool(GachaId){\n        var API = Spark.getGameDataService();\n        var entryObject = API.getItem(\"Gacha\", \"Permanent-\" + GachaId);\n        \n        var entry = entryObject.document();\n        entry.delete();\n        \n        return;\n    }\n    \n    function GetGacha(gachaId){\n        //Load API and get entry\n        var API = Spark.getGameDataService();\n        \n        //Attempt to get entry\n        var entryObject = API.getItem(\"Gacha\", \"Permanent-\" + gachaId);\n        \n        //If error attempting to retrieve entry\n        if(entryObject.error()){\n            Spark.setScriptError(\"ERROR\", entryObject.error());\n            Spark.exit();\n        } else {\n            //Get entry\n            var entry = entryObject.document();\n            //Access Data\n            var entryData = entry.getData();\n            \n            return entryData;\n        }\n    }\n    \n    function GetGachaMetaData(){\n        //Load API and get entry\n        var API = Spark.getGameDataService();\n        \n        //Attempt to get entry\n        var entryObject = API.getItem(\"MetaData\", \"Gacha\");\n        \n        //If error attempting to retrieve entry\n        if(entryObject.error()){\n            Spark.setScriptError(\"ERROR\", entryObject.error());\n            Spark.exit();\n        } else {\n            //Get entry\n            var entry = entryObject.document();\n            //Access Data\n            var entryData = entry.getData();\n            \n            return entryData;\n        }\n    }\n    \n    function IncrementPermanentPoolCount(){\n        //Load API and get entry\n        var API = Spark.getGameDataService();\n        \n        //Attempt to get entry\n        var entryObject = API.getItem(\"MetaData\", \"Gacha\");\n        \n        //If error attempting to retrieve entry\n        if(entryObject.error()){\n            Spark.setScriptError(\"ERROR\", entryObject.error());\n            Spark.exit();\n        } else {\n            //Get entry\n            var entry = entryObject.document();\n            //Access Data\n            var entryData = entry.getData();\n            \n            entryData.PermanentCount = entryData.PermanentCount + 1;\n            \n            //Persist and return any errors\n            var entryStatus = entry.persistor().persist().error();\n            \n            //If there are errors the entry would not persist and we can act on that information\n            if(entryStatus){\n                //Output error script\n                Spark.setScriptError(\"ERROR\", entryStatus);\n                entryData.error = entryStatus;\n            }\n            \n            return entryData;\n        }\n    }\n    \n    function GetGachaTicketsList(){\n        var config = Spark.getConfig();\n        var vGoods = config.getVirtualGoods();\n        var gachaTickets = [];\n        for(var i = 0; i < vGoods.length; i++){\n            var propertySet = vGoods[i].getPropertySet();\n            if(propertySet.ItemType.Type == \"GachaTicket\"){\n                gachaTickets.push({\n                    \"Name\": vGoods[i].name,\n                    \"ShortCode\": vGoods[i].shortCode\n                });\n            }\n        }\n        \n        return gachaTickets;\n    }\n}","template":"{{#if form.exitNew}}\n    <gs-modal-close></gs-modal-close>\n    <gs-snippet snippet=\"Gacha_List?action=view\" target=\"content\"></gs-snippet>\n{{else if form.exit}}\n    <gs-modal-close></gs-modal-close>\n    <gs-snippet snippet=\"Gacha_Pool_Details?action=view&GachaType={{form.GachaType}}&GachaId={{form.GachaId}}\" target=\"content\"></gs-snippet>\n{{else}}\n<gs-title-block \n    {{#if form.delete}}\n    title=\"Delete permanent pool\"\n    {{else if form.new}}\n    title=\"Create new permanent pool\"\n    {{else}}\n    title=\"{{form.data.Name}}\"\n    {{/if}}\n>\n    <br>\n    <gs-row>\n        <gs-form \n            {{#if form.new}}\n            snippet=\"Gacha_Permanent_Pool_Manager?action=create&GachaType={{form.GachaType}}&GachaId={{form.GachaId}}\" target=\"modal-small\"\n            {{else}}\n            snippet=\"Gacha_Permanent_Pool_Manager?action=update&GachaType={{form.GachaType}}&GachaId={{form.GachaId}}\" target=\"modal-small\"\n            {{/if}}\n        >\n            <gs-row>\n                <gs-col width=\"2\">\n                    Item Cost:\n                </gs-col>\n                <gs-col width=\"4\">\n                    <select name=\"ItemCost\">\n                        {{#each form.GachaTickets}}\n                        <option value=\"{{this.ShortCode}}|{{this.Name}}\" {{#if this.Selected}} selected {{/if}}>{{this.Name}}</option>\n                        {{/each}}\n                    </select>\n                </gs-col>\n            </gs-row>\n            <gs-row>\n                <gs-col width=\"2\">Name: </gs-col>\n                <gs-col width=\"4\">\n                    <input type=\"text\" name=\"Name\" value=\"{{form.data.Name}}\"required/>\n                </gs-col>\n            </gs-row>\n            <gs-row>\n                <gs-col width=\"6\"></gs-col>\n                {{#if form.new}}\n                <gs-col width=\"2\">\n                    <gs-submit>Create</gs-submit>\n                </gs-col>\n                <gs-col width=\"2\">\n                    <gs-link snippet=\"Gacha_Permanent_Pool_Manager?action=exitNew\"><Button>Close</Button></gs-link>\n                </gs-col>\n                {{else if form.delete}}\n                <gs-row>\n                    <gs-col width=\"6\"></gs-col>\n                    <gs-col width=\"2\">\n                        <gs-link snippet=\"Gacha_Permanent_Pool_Manager?action=delete&GachaType={{form.GachaType}}&GachaId={{form.GachaId}}\"><Button>Delete</Button></gs-link>\n                    </gs-col>\n                    <gs-col width=\"2\">\n                        <gs-link snippet=\"Gacha_Permanent_Pool_Manager?action=exit&GachaType={{form.GachaType}}&GachaId={{form.GachaId}}\"><Button>Close</Button></gs-link>\n                    </gs-col>\n                </gs-row>\n                {{else}}\n                <gs-col width=\"2\">\n                    <gs-submit>Save Changes</gs-submit>\n                </gs-col>\n                <gs-col width=\"2\">\n                    <gs-link snippet=\"Gacha_Permanent_Pool_Manager?action=exit&GachaType={{form.GachaType}}&GachaId={{form.data.Id}}\"><Button>Close</Button></gs-link>\n                </gs-col>\n                {{/if}}\n            </gs-row>\n            {{#if form.updated}}\n            <gs-row>\n                <gs-col width=\"6\"></gs-col>\n                <gs-col width=\"3\">\n                    <gs-alert type=\"success\" message=\"Update success\"></gs-alert>\n                </gs-col>\n            </gs-row>\n            {{/if}}\n            {{#if form.created}}\n            <gs-row>\n                <gs-col width=\"6\"></gs-col>\n                <gs-col width=\"3\">\n                    <gs-alert type=\"success\" message=\"Create success\"></gs-alert>\n                </gs-col>\n            </gs-row>\n            {{/if}}\n        </gs-form>\n    </gs-row>\n</gs-title-block>\n{{/if}}","groups":[]},"Gacha_Pool_Copier":{"shortCode":"Gacha_Pool_Copier","name":"Gacha: Pool Copier","scriptData":"{\n    \"action\": \"view\",\n    \"GachaType\": \"Scheduled\",\n    \"GachaId\": \"2\"\n}","script":"Spark.setScriptData(\"form\", SnippetProcessor(Spark.getData().scriptData));\n\nfunction SnippetProcessor(data){\n    var form = {};\n    form.GachaType = data.GachaType;\n    form.GachaId = data.GachaId;\n    \n    switch(data.action){\n        case \"view\":\n            return view(data);\n        case \"update\":\n            return update(data);\n        case \"exit\":\n            return exit(data);\n    }\n    \n    function view(data){\n        var entryData = GetGacha(data.GachaType, data.GachaId);\n        var permanentPools = GetPermanentGachas();\n        \n        var gachaList = [];\n        for(var i = 0; i < permanentPools.length; i++){\n            gachaList.push(\n                {\n                    \"GachaType\": permanentPools[i].Type,\n                    \"GachaId\": permanentPools[i].Id,\n                    \"Name\": permanentPools[i].Name\n                }\n            );\n        }\n        \n        form.GachaList = gachaList;\n        \n        form.data = entryData;\n        return form;\n    }\n    \n    function update(data){\n        var parse = data.BasePool.split(\"|\");\n        UpdatePool(data.GachaType, data.GachaId, parse[0], parse[1]);\n        \n        form.updated = true;\n        return view(data);\n    }\n    \n    function exit(data){\n        form.exit = true;\n        return form;\n    }\n    \n    function UpdatePool(gachaType, gachaId, copyGachaType, copyGachaId){\n        //Load API and get entry\n        var API = Spark.getGameDataService();\n        \n        //Attempt to get entry\n        var entryObject = API.getItem(\"Gacha\", gachaType + \"-\" + gachaId);\n        \n        //If error attempting to retrieve entry\n        if(entryObject.error()){\n            Spark.setScriptError(\"ERROR\", entryObject.error());\n            Spark.exit();\n        } else {\n            //Get entry\n            var entry = entryObject.document();\n            //Access Data\n            var entryData = entry.getData();\n            \n            var copyPool = GetGacha(copyGachaType, copyGachaId);\n            entryData.Pools = copyPool.Pools;\n            entryData.BasePool = copyPool.Name;\n            entryData.CopyDate = new Date().toISOString();\n            \n            //Persist and return any errors\n            var entryStatus = entry.persistor().persist().error();\n            \n            //If there are errors the entry would not persist and we can act on that information\n            if(entryStatus){\n                //Output error script\n                Spark.setScriptError(\"ERROR\", entryStatus);\n                entryData.error = entryStatus;\n            }\n            \n            return entryData;\n        }\n    }\n    \n    function GetGacha(gachaType, gachaId){\n        //Load API and get entry\n        var API = Spark.getGameDataService();\n        \n        //Attempt to get entry\n        var entryObject = API.getItem(\"Gacha\", gachaType + \"-\" + gachaId);\n        \n        //If error attempting to retrieve entry\n        if(entryObject.error()){\n            Spark.setScriptError(\"ERROR\", entryObject.error());\n            Spark.exit();\n        } else {\n            //Get entry\n            var entry = entryObject.document();\n            //Access Data\n            var entryData = entry.getData();\n            \n            return entryData;\n        }\n    }\n\n    function GetPermanentGachas() {\n        //Load API and get entry\n        var API = Spark.getGameDataService();\n    \n        var condition = API.S(\"Type\").eq(\"Permanent\");\n        var sortOrder = API.sort(\"DateStart\", true);\n        var query = API.queryItems(\"Gacha\", condition, sortOrder);\n        \n        if(query.error()){\n            //Output error script\n            Spark.setScriptError(\"ERROR\", query.error());\n            //Stop execution of script\n            Spark.exit();    \n        } else{\n             //Create empty object\n            var object = [];\n            //While there are still entries in the cursor retrieved from query\n            while(query.cursor().hasNext()){\n                //Get the entry\n                entry = query.cursor().next();\n                //Populate object with the entries. key = entry ID\n                entryData = entry.getData();\n                \n                object.push(entryData);\n                \n            }\n            \n            return object;\n        }\n    }\n    \n}","template":"{{#if form.exit}}\n    <gs-modal-close></gs-modal-close>\n    <gs-snippet snippet=\"Gacha_Pool_Details?action=view&GachaType={{form.GachaType}}&GachaId={{form.GachaId}}\" target=\"content\"></gs-snippet>\n{{else}}\n    <gs-title-block title=\"{{form.data.Name}} - Gacha Pool Copy\">\n        <gs-form snippet=\"Gacha_Pool_Copier?action=update&GachaType={{form.GachaType}}&GachaId={{form.GachaId}}\" target=\"modal-small\">\n            <gs-row>\n                <gs-col width=\"6\">\n                    Choose a pool to copy:\n                </gs-col>\n                \n            </gs-row>\n            <gs-row>\n                <gs-col width=\"12\">\n                    <select name=\"BasePool\">\n                        {{#each form.GachaList}}\n                            <option value=\"{{this.GachaType}}|{{this.GachaId}}\">{{this.Name}}</option>\n                        {{/each}}\n                    </select>\n                </gs-col>\n            </gs-row>\n            <gs-row>\n                <gs-col width=\"6\"></gs-col>\n                <gs-col width=\"3\">\n                    <gs-submit>Copy Pool</gs-submit>\n                </gs-col>\n                <gs-col width=\"3\">\n                    <gs-link snippet=\"Gacha_Pool_Copier?action=exit&GachaType={{form.GachaType}}&GachaId={{form.GachaId}}\"><Button>Close</Button></gs-link>\n                </gs-col>\n            </gs-row>\n            <gs-row>\n                {{#if form.updated}}\n                <gs-col width=\"6\">\n                    \n                </gs-col>\n                <gs-col width=\"6\">\n                    <gs-alert type=\"success\" message=\"Copy success\"></gs-alert>\n                </gs-col>\n                {{/if}}\n            </gs-row>\n        </gs-form>\n    </gs-title-block>\n    \n{{/if}}\n\n\n","groups":[]},"Gacha_Pool_Manager":{"shortCode":"Gacha_Pool_Manager","name":"Gacha: Pool Manager","scriptData":"{\n    \"action\": \"viewNew\",\n    \"GachaType\": \"Permanent\",\n    \"GachaId\": \"3\",\n    \"PoolIndex\": \"0\"\n}","script":"Spark.setScriptData(\"form\", SnippetProcessor(Spark.getData().scriptData));\n\nfunction SnippetProcessor(data){\n    \n    var form = {};\n    form.GachaType = data.GachaType;\n    form.GachaId = data.GachaId;\n    form.PoolIndex = data.PoolIndex;\n    \n    switch(data.action){\n        case \"view\":\n            return view(data);\n        case \"viewNew\":\n            return viewNew(data);\n        case \"viewDelete\":\n            return viewDelete(data);\n        case \"create\":\n            return create(data);\n        case \"update\":\n            return update(data);\n        case \"delete\":\n            return deleteItem(data);\n        case \"exit\":\n            return exit(data);\n    }\n    \n    function view(data){\n        var entryData = GetGacha(data.GachaType, data.GachaId);\n        form.data = entryData;\n        if(entryData.Pools.length === 0){\n            form.emptyError = true;\n            return form;\n        }\n        var pool = entryData.Pools[Number(data.PoolIndex)];\n        form.Name = pool.Name;\n        form.Weight = pool.Weight;\n        form.Chance = pool.Chance;\n        return form;\n    }\n    \n    function viewNew(data){\n        var entryData = GetGacha(data.GachaType, data.GachaId);\n        form.data = entryData; \n        form.PoolIndex = entryData.Pools.length;\n        form.new = true;\n        return form;\n    }\n    \n    function viewDelete(data){\n        var entryData = GetGacha(data.GachaType, data.GachaId);\n        if(entryData.Pools.length === 0){\n            form.emptyError = true;\n            return form;\n        }\n        \n        form.data = entryData;\n        var poolIndex = entryData.Pools.length - 1;\n        form.PoolIndex = poolIndex;\n        var pool = entryData.Pools[poolIndex];\n        form.Name = pool.Name;\n        form.Weight = pool.Weight;\n        form.Chance = pool.Chance;\n        \n        form.delete = true;\n        return form;\n    }\n    \n    function create(data){\n        var updateData = {\n            \"Name\": data.Name,\n            \"Weight\": Number(data.Weight)\n        };\n        var entryData = AddPool(data.GachaType, data.GachaId, updateData);\n        form.data = entryData;\n        form.updated = true;\n        return view(data);\n    }\n    \n    function update(data){\n        var updateData = {\n            \"Name\": data.Name,\n            \"Weight\": Number(data.Weight)\n        };\n        var entryData = UpdatePool(data.GachaType, data.GachaId, Number(data.PoolIndex), updateData);\n        //form.data = entryData;\n        form.updated = true;\n        return view(data);\n    }\n    \n    function deleteItem(data){\n        DeletePool(data.GachaType, data.GachaId);\n        form.exit = true;\n        return form;\n    }\n    \n    function exit(data){\n        form.exit = true;\n        return form;\n    }\n    \n    function AddPool(GachaType, GachaId, UpdateData){\n        //Load API and get entry\n        var API = Spark.getGameDataService();\n        \n        //Attempt to get entry\n        var entryObject = API.getItem(\"Gacha\", GachaType + \"-\" + GachaId);\n        \n        //If error attempting to retrieve entry\n        if(entryObject.error()){\n            Spark.setScriptError(\"ERROR\", entryObject.error());\n            Spark.exit();\n        } else {\n            //Get entry\n            var entry = entryObject.document();\n            //Access Data\n            var entryData = entry.getData();\n            \n            var newPool = {\n                \"Weight\": UpdateData.Weight,\n                \"Name\": UpdateData.Name,\n                \"Chance\": 0,\n                \"Subpools\": []\n            };\n            \n            entryData.Pools.push(newPool);\n            \n            entryData = RecalculatePoolChances(entryData);\n            //Persist and return any errors\n            var entryStatus = entry.persistor().persist().error();\n            \n            //If there are errors the entry would not persist and we can act on that information\n            if(entryStatus){\n                //Output error script\n                Spark.setScriptError(\"ERROR\", entryStatus);\n                entryData.error = entryStatus;\n            }\n\n            return entryData;\n        }\n    }\n    \n    function DeletePool(GachaType, GachaId){\n        //Load API and get entry\n        var API = Spark.getGameDataService();\n        \n        //Attempt to get entry\n        var entryObject = API.getItem(\"Gacha\", GachaType + \"-\" + GachaId);\n        \n        //If error attempting to retrieve entry\n        if(entryObject.error()){\n            Spark.setScriptError(\"ERROR\", entryObject.error());\n            Spark.exit();\n        } else {\n            //Get entry\n            var entry = entryObject.document();\n            //Access Data\n            var entryData = entry.getData();\n            \n            entryData.Pools.pop();\n            \n            entryData = RecalculatePoolChances(entryData);\n            //Persist and return any errors\n            var entryStatus = entry.persistor().persist().error();\n            \n            //If there are errors the entry would not persist and we can act on that information\n            if(entryStatus){\n                //Output error script\n                Spark.setScriptError(\"ERROR\", entryStatus);\n                entryData.error = entryStatus;\n            }\n            \n            return entryData;\n        }\n    }\n    \n\tfunction UpdatePool(GachaType, GachaId, PoolIndex, UpdateData){\n        //Load API and get entry\n        var API = Spark.getGameDataService();\n        \n        //Attempt to get entry\n        var entryObject = API.getItem(\"Gacha\", GachaType + \"-\" + GachaId);\n        \n        //If error attempting to retrieve entry\n        if(entryObject.error()){\n            Spark.setScriptError(\"ERROR\", entryObject.error());\n            Spark.exit();\n        } else {\n            //Get entry\n            var entry = entryObject.document();\n            //Access Data\n            var entryData = entry.getData();\n            \n            entryData.Pools[PoolIndex].Weight = UpdateData.Weight;\n            entryData.Pools[PoolIndex].Name = UpdateData.Name;\n            \n            entryData = RecalculatePoolChances(entryData);\n            \n            //Persist and return any errors\n            var entryStatus = entry.persistor().persist().error();\n            \n            //If there are errors the entry would not persist and we can act on that information\n            if(entryStatus){\n                //Output error script\n                Spark.setScriptError(\"ERROR\", entryStatus);\n                entryData.error = entryStatus;\n            }\n            \n            return entryData;\n        }\n        \n\t}\n\t\n\tfunction GetGacha(GachaType, GachaId){\n        //Load API and get entry\n        var API = Spark.getGameDataService();\n        \n        //Attempt to get entry\n        var entryObject = API.getItem(\"Gacha\", GachaType + \"-\" + GachaId);\n        \n        //If error attempting to retrieve entry\n        if(entryObject.error()){\n            Spark.setScriptError(\"ERROR\", entryObject.error());\n            Spark.exit();\n        } else {\n            //Get entry\n            var entry = entryObject.document();\n            //Access Data\n            var entryData = entry.getData();\n            \n            return entryData;\n        }\n    }\n    \n    function RecalculatePoolChances(entryData){\n        //Calculate Pool\n        var poolTotalWeight = 0;\n        var subpoolTotalWeight = [];\n        var contentWeights = [];\n        var currentPool;\n        var currentSubpool;\n        var currentContent;\n        for(var poolIndex = 0; poolIndex < entryData.Pools.length; poolIndex++){\n            currentPool = entryData.Pools[poolIndex];\n            poolTotalWeight += currentPool.Weight;\n            subpoolTotalWeight.push(0);\n            contentWeights.push([]);\n            \n            for(var subpoolIndex = 0; subpoolIndex < currentPool.Subpools.length; subpoolIndex++){\n                currentSubpool = currentPool.Subpools[subpoolIndex];\n                subpoolTotalWeight[poolIndex] += currentSubpool.Weight;\n                contentWeights[poolIndex].push(0);\n                \n                for(var contentIndex = 0; contentIndex < currentSubpool.Contents.length; contentIndex++){\n                    currentContent = currentSubpool.Contents[contentIndex];\n                    contentWeights[poolIndex][subpoolIndex] += currentContent.Weight;\n                }\n            }\n        }\n        \n        for(poolIndex = 0; poolIndex < entryData.Pools.length; poolIndex++){\n            currentPool = entryData.Pools[poolIndex];\n            var poolChance = Math.round(((currentPool.Weight / poolTotalWeight) * 100) * 1000) / 1000;\n            \n            currentPool.Chance = poolChance;\n            entryData.Pools[poolIndex].Chance = poolChance;\n            \n            for(subpoolIndex = 0; subpoolIndex < currentPool.Subpools.length; subpoolIndex++){\n                currentSubpool = currentPool.Subpools[subpoolIndex];\n                var subpoolChance = Math.round(((currentSubpool.Weight / subpoolTotalWeight[poolIndex]) * currentPool.Chance) * 1000) / 1000;\n                \n                entryData.Pools[poolIndex].Subpools[subpoolIndex].TotalChance = subpoolChance;\n                currentSubpool.TotalChance = subpoolChance;\n                \n                for(contentIndex = 0; contentIndex < currentSubpool.Contents.length; contentIndex++){\n                    currentContent = currentSubpool.Contents[contentIndex];\n                    var contentChance = Math.round(((currentContent.Weight / contentWeights[poolIndex][subpoolIndex]) * currentSubpool.TotalChance) * 1000) / 1000;\n                    currentContent.TotalChance = contentChance;\n                    entryData.Pools[poolIndex].Subpools[subpoolIndex].Contents[contentIndex].TotalChance = contentChance;\n                }\n            }\n        }\n        \n        return entryData;\n    }\n}","template":"{{#if form.exit}}\n    <gs-modal-close></gs-modal-close>\n    <gs-snippet snippet=\"Gacha_Pool_Details?action=view&GachaType={{form.GachaType}}&GachaId={{form.GachaId}}\" target=\"content\"></gs-snippet>\n{{else}}\n    <gs-title-block \n        {{#if form.delete}}\n            title=\"{{form.data.Name}}: Deleting Pool\"\n        {{else if form.new}}\n            title=\"{{form.data.Name}}: Adding new Pool\"\n        {{else}}\n            title=\"{{form.data.Name}}: Updating Pool\" \n        {{/if}}\n        padding=\"10\"\n    >\n        <gs-form\n            {{#if form.new}}\n            snippet=\"Gacha_Pool_Manager?action=create&GachaType={{form.GachaType}}&GachaId={{form.GachaId}}&PoolIndex={{form.PoolIndex}}\" target=\"modal-small\"\n            {{else}}\n            snippet=\"Gacha_Pool_Manager?action=update&GachaType={{form.GachaType}}&GachaId={{form.GachaId}}&PoolIndex={{form.PoolIndex}}\" target=\"modal-small\"\n            {{/if}}\n        >\n            {{form.test}}\n            <gs-row>\n                <gs-col width=\"2\">\n                    Index\n                </gs-col>\n                <gs-col width=\"3\">\n                    Name\n                </gs-col>\n                <gs-col width=\"3\">\n                    Weight\n                </gs-col>\n                <gs-col width=\"2\">\n                    Chance\n                </gs-col>\n            </gs-row>\n            <gs-row>\n                <gs-col width=\"2\">\n                    <input type=\"number\" value=\"{{form.PoolIndex}}\" name=\"PoolIndex\" disabled>\n                </gs-col>\n                <gs-col width=\"3\">\n                    <input type=\"text\" name=\"Name\" value=\"{{form.Name}}\" required>\n                </gs-col>\n                <gs-col width=\"3\">\n                    <input type=\"number\" name=\"Weight\" value=\"{{form.Weight}}\" required>\n                </gs-col>\n                <gs-col width=\"2\">\n                    <input type=\"number\" name=\"Chance\" value=\"{{form.Chance}}\" disabled>\n                </gs-col>\n            </gs-row>\n            <gs-row>\n                <gs-col width=\"5\"></gs-col>\n                <gs-col width=\"3\">\n                    {{#if form.delete}}\n                    <gs-link snippet=\"Gacha_Pool_Manager?action=delete&GachaType={{form.GachaType}}&GachaId={{form.GachaId}}&PoolIndex={{form.PoolIndex}}\"><Button>Delete</Button></gs-link>\n                    {{else if form.new}}\n                    <gs-submit>Add pool</gs-submit>\n                    {{else if form.emptyError}}\n                    \n                    {{else}}\n                    <gs-submit>Save Changes</gs-submit>\n                    {{/if}}\n                </gs-col>\n                <gs-col width=\"2\">\n                    <gs-link snippet=\"Gacha_Pool_Manager?action=exit&GachaType={{form.GachaType}}&GachaId={{form.GachaId}}&PoolIndex={{form.PoolIndex}}\"><Button>Close</Button></gs-link>\n                </gs-col>\n            </gs-row>\n            <gs-row>\n                <gs-col width=\"7\"></gs-col>\n                <gs-col width=\"4\">\n                    {{#if form.updated}}\n                        <gs-alert type=\"success\" message=\"Saved\"></gs-alert>\n                    {{/if}}\n                    {{#if form.emptyError}}\n                        <gs-alert type=\"error\" message=\"Pool is empty\"></gs-alert>\n                    {{/if}}\n                    {{#if form.duplicateError}}\n                        <gs-alert type=\"error\" message=\"Duplicate Character\"></gs-alert>\n                    {{/if}}\n                </gs-col>\n            </gs-row>\n        </gs-form>\n    </gs-title-block>\n{{/if}}\n\n\n","groups":[]},"Gacha_Pool_Details":{"shortCode":"Gacha_Pool_Details","name":"Gacha_Pool_Details","scriptData":"{\n    \"action\": \"view\",\n    \"GachaType\": \"Permanent\",\n    \"GachaId\": \"3\"\n}","script":"Spark.setScriptData(\"form\", SnippetProcessor(Spark.getData().scriptData));\n\nfunction SnippetProcessor(data){\n    \n    var form = {};\n    form.GachaType = data.GachaType;\n    form.GachaId = data.GachaId;\n    \n    switch(data.action){\n        case \"view\":\n            return view(data);\n        case \"exit\":\n            return exit(data);\n    }\n    \n    function view(data){\n        var gachaMetaData = GetGachaMetaData();\n        var entryData = GetGacha(data.GachaType, data.GachaId);\n        \n        if(entryData.Type === \"Scheduled\"){\n            form.Scheduled = true;\n            entryData.CreationDate = new Date(entryData.CreationDate).toDateString();\n            entryData.DateStart = new Date(entryData.DateStart).toDateString();\n            entryData.DateEnd = new Date(entryData.DateEnd).toDateString();\n            \n            if(entryData.BasePool !== undefined || entryData.BasePool !== null){\n                entryData.CopyDate = new Date(entryData.CopyDate).toDateString();\n            }\n            \n            var today = new Date();\n            form.today = today.toDateString();\n            \n            var isoToday = today.toISOString();\n            if(isoToday >= entryData.DateStart && isoToday < entryData.DateEnd){\n                form.Status = \"Live\";\n            } else if(isoToday < entryData.DateEnd) {\n                form.Status = \"Scheduled\";\n            } else if(isoToday >= entryData.DateEnd){\n                form.Status = \"Expired\";\n            }\n        } else {\n            form.Scheduled = false;\n            form.Permanent = true;\n        }\n        \n        if(entryData.error !== undefined || entryData.error !== null){\n            form.error = entryData.error;\n        }\n        \n        var poolTypes = gachaMetaData.PoolTypes;\n        \n        for(var i = 0; i < entryData.Pools.length; i++){\n            var currentPool = entryData.Pools[i];\n            for(var j = 0; j < currentPool.Subpools.length; j++){\n                var currentSubpool = currentPool.Subpools[j];\n                entryData.Pools[i].Subpools[j].PoolTypeName = poolTypes[currentSubpool.PoolType].Name;\n            } \n        }\n        \n        form.data = entryData;\n        \n        return form;\n    }\n    \n    function exit(data){\n        form.exit = true;\n        return form;\n    }\n    \n    function GetGacha(gachaType, gachaId){\n        //Load API and get entry\n        var API = Spark.getGameDataService();\n        \n        //Attempt to get entry\n        var entryObject = API.getItem(\"Gacha\", gachaType + \"-\" + gachaId);\n        \n        //If error attempting to retrieve entry\n        if(entryObject.error()){\n            Spark.setScriptError(\"ERROR\", entryObject.error());\n            Spark.exit();\n        } else {\n            //Get entry\n            var entry = entryObject.document();\n            //Access Data\n            var entryData = entry.getData();\n            \n            return entryData;\n        }\n    }\n    \n    function GetGachaMetaData(){\n        //Load API and get entry\n        var API = Spark.getGameDataService();\n        \n        //Attempt to get entry\n        var entryObject = API.getItem(\"MetaData\", \"Gacha\");\n        \n        //If error attempting to retrieve entry\n        if(entryObject.error()){\n            Spark.setScriptError(\"ERROR\", entryObject.error());\n            Spark.exit();\n        } else {\n            //Get entry\n            var entry = entryObject.document();\n            //Access Data\n            var entryData = entry.getData();\n            \n            return entryData;\n        }\n    }\n}","template":"{{#if form.exit}}\n    <gs-snippet snippet=\"Gacha_List?action=view\" target=\"content\"></gs-snippet>\n{{else}}\n<gs-title-block title=\"{{form.data.Name}}\">\n    \n    <br>\n    <gs-title-block title=\"Information\" width=\"11\">\n        <gs-row>\n            <gs-col width=\"6\"></gs-col>\n            <gs-col width=\"3\">\n                <gs-link snippet=\"Gacha_Pool_Copier?action=view&GachaType={{form.GachaType}}&GachaId={{form.GachaId}}\" target=\"modal-small\"><Button>Copy Pool</Button></gs-link>\n            </gs-col>\n            {{#if form.Scheduled}}\n            <gs-col width=\"3\">\n                <gs-link snippet=\"Gacha_Featured_Pool_Manager?action=view&GachaType={{form.GachaType}}&GachaId={{form.data.Id}}\" target=\"modal-small\"><Button>Edit Info</Button></gs-link>\n            </gs-col>\n            {{/if}}\n            {{#if form.Permanent}}\n            <gs-col width=\"3\">\n                <gs-link snippet=\"Gacha_Permanent_Pool_Manager?action=view&GachaType={{form.GachaType}}&GachaId={{form.data.Id}}\" target=\"modal-small\"><Button>Edit Info</Button></gs-link>\n            </gs-col>\n            {{/if}}\n        </gs-row>\n        <gs-row>\n            <gs-col width=\"2\">\n                ShortCode\n            </gs-col>\n            <gs-col width=\"3\">\n                {{form.data.Type}}-{{form.data.Id}}\n            </gs-col>\n        </gs-row>\n        <gs-row>\n            <gs-col width=\"2\">Today's Date: </gs-col>\n            <gs-col width=\"3\">{{form.today}}</gs-col>\n        </gs-row>\n        <gs-row>\n            <gs-col width=\"2\">\n                Date Created: \n            </gs-col>\n            <gs-col width=\"3\">\n                {{form.data.CreationDate}}\n            </gs-col>\n        </gs-row>\n        <gs-row>\n            <gs-col width=\"2\">\n                Item Cost \n            </gs-col>\n            <gs-col width=\"3\">\n                {{form.data.ItemCostName}}\n            </gs-col>\n        </gs-row>\n        {{#if form.Scheduled}}\n            {{#if form.data.BasePool}}\n            <gs-row>\n                <gs-col width=\"2\">\n                    Base Pool:\n                </gs-col>\n                <gs-col width=\"3\">\n                    {{form.data.BasePool}}\n                </gs-col>\n                <gs-col width=\"3\">\n                    Copied {{form.data.CopyDate}}\n                </gs-col>\n            </gs-row>\n            {{/if}}\n        <gs-row>\n            <gs-col width=\"2\">\n                Start Date\n            </gs-col>\n            <gs-col width=\"3\">\n                {{form.data.DateStart}}\n            </gs-col>\n        </gs-row>\n        <gs-row>\n            <gs-col width=\"2\">\n                End Date\n            </gs-col>\n            <gs-col width=\"3\">\n                {{form.data.DateEnd}}\n            </gs-col>\n        </gs-row>\n        {{/if}}\n        <br>\n    </gs-title-block>\n    \n    <br>\n    <gs-row>\n        <gs-col width=\"6\"></gs-col>\n        <gs-col width=\"3\">\n            <gs-link snippet=\"Gacha_Pool_Manager?action=viewNew&GachaType={{form.GachaType}}&GachaId={{form.GachaId}}\" target=\"modal-small\"><Button>Add Pool</Button></gs-link>\n        </gs-col>\n        <gs-col width=\"3\">\n            <gs-link snippet=\"Gacha_Pool_Manager?action=viewDelete&GachaType={{form.GachaType}}&GachaId={{form.GachaId}}\" target=\"modal-small\"><Button>Delete Pool</Button></gs-link>\n        </gs-col>\n    </gs-row>\n    <br>\n    {{#each form.data.Pools}}\n        <gs-title-block title=\"Pool - {{this.Name}}\" padding=\"10\" width=\"11\">\n            <gs-row>\n                <gs-col width=\"2\">\n                    <gs-col width=\"6\">\n                        Weight:\n                    </gs-col>\n                    <gs-col width=\"6\">\n                        {{this.Weight}}\n                    </gs-col>\n                </gs-col>\n                <gs-col width=\"2\">\n                    <gs-col width=\"6\">\n                        Chance\n                    </gs-col>\n                    <gs-col width=\"6\">\n                        {{this.Chance}}%\n                    </gs-col>\n                </gs-col>\n                <gs-col width=\"8\">\n                    <gs-col width=\"4\">\n                        <gs-link snippet=\"Gacha_Pool_Manager?action=view&GachaType={{../form.GachaType}}&GachaId={{../form.GachaId}}&PoolIndex={{@index}}\" target=\"modal-small\"><Button>Edit Pool</Button></gs-link>\n                    </gs-col>\n                    <gs-col width=\"4\">\n                        <gs-link snippet=\"Gacha_Subpool_Manager?action=viewNew&GachaType={{../form.GachaType}}&GachaId={{../form.GachaId}}&PoolIndex={{@index}}\" target=\"modal-small\"><Button>Add subpool</Button></gs-link>\n                    </gs-col>\n                    <gs-col width=\"4\">\n                        <gs-link snippet=\"Gacha_Subpool_Manager?action=viewDelete&GachaType={{../form.GachaType}}&GachaId={{../form.GachaId}}&PoolIndex={{@index}}\" target=\"modal-small\"><Button>Delete subpool</Button></gs-link>\n                    </gs-col>\n                </gs-col>\n            </gs-row>\n            <br>\n            <gs-row>\n                <gs-col width=\"12\">\n                    {{#each this.Subpools}}\n                        <gs-row>\n                            <gs-col width=\"1\"></gs-col>\n                            <gs-title-block title=\"Subpool - {{this.Name}}\" width=\"10\" padding=\"10\">\n                                <gs-row>\n                                    <gs-col width=\"3\">\n                                        <gs-col width=\"6\">\n                                            Type:\n                                        </gs-col>\n                                        <gs-col width=\"6\">\n                                            {{this.PoolTypeName}}\n                                        </gs-col>\n                                    </gs-col>\n                                    <gs-col width=\"6\"></gs-col>\n                                    <gs-col width=\"3\">\n                                        <gs-link snippet=\"Gacha_Subpool_Manager?action=view&GachaType={{../../form.GachaType}}&GachaId={{../../form.GachaId}}&PoolIndex={{@../index}}.&SubpoolIndex={{@index}}\" target=\"modal-small\"><Button>Edit Subpool</Button></gs-snippet>\n                                    </gs-col>\n                                </gs-row>\n                                <gs-row>\n                                    <gs-col width=\"3\">\n                                        <gs-col width=\"6\">\n                                            Weight:\n                                        </gs-col>\n                                        <gs-col width=\"6\">\n                                            {{this.Weight}}\n                                        </gs-col>\n                                    </gs-col>\n                                    <gs-col width=\"3\">\n                                        <gs-col width=\"6\">\n                                            Total Chance:\n                                        </gs-col>\n                                        <gs-col width=\"6\">\n                                            {{this.TotalChance}}%\n                                        </gs-col>\n                                    </gs-col>\n                                    <gs-col width=\"3\">\n                                        <gs-link snippet=\"Gacha_Subpool_Entry?action=viewNew&GachaType={{../../form.GachaType}}&GachaId={{../../form.GachaId}}&PoolIndex={{@../index}}&SubpoolIndex={{@index}}\" target=\"modal-small\"><Button>Add Entry</Button></gs-snippet>\n                                    </gs-col>\n                                    \n                                </gs-row>\n                                <gs-title-block title=\"Contents\" width=\"11\">\n                                    <gs-row>\n                                        <gs-col width=\"2\">\n                                            ShortCode\n                                        </gs-col>\n                                        <gs-col width=\"1\">\n                                            Weight\n                                        </gs-col>\n                                        <gs-col width=\"3\">\n                                            Name\n                                        </gs-col>\n                                        <gs-col width=\"2\">\n                                            Total Chance\n                                        </gs-col>\n                                        <gs-col width=\"1\">\n                                            \n                                        </gs-col>\n                                        <gs-col width=\"1\">\n                                            \n                                        </gs-col>\n                                    </gs-row>\n                                    {{#each this.Contents}}\n                                        <gs-row>\n                                            <gs-col width=\"2\">\n                                                {{this.ShortCode}}\n                                            </gs-col>\n                                            <gs-col width=\"1\">\n                                                {{this.Weight}}\n                                            </gs-col>\n                                            <gs-col width=\"3\">\n                                                {{this.Name}}\n                                            </gs-col>\n                                            <gs-col width=\"2\">\n                                                {{this.TotalChance}}%\n                                            </gs-col>\n                                            <gs-col width=\"1\">\n                                                <gs-link snippet=\"Gacha_Subpool_Entry?action=view&GachaType={{../../../form.GachaType}}&GachaId={{../../../form.GachaId}}&PoolIndex={{@../../index}}&SubpoolIndex={{@../index}}&EntryIndex={{@index}}\" target=\"modal-small\"><Button>Edit</Button></gs-link>\n                                            </gs-col>\n                                            <gs-col width=\"1\">\n                                                <gs-link snippet=\"Gacha_Subpool_Entry?action=viewDelete&GachaType={{../../../form.GachaType}}&GachaId={{../../../form.GachaId}}&PoolIndex={{@../../index}}&SubpoolIndex={{@../index}}&EntryIndex={{@index}}\" target=\"modal-small\"><Button>Delete</Button></gs-link>\n                                            </gs-col>\n                                        </gs-row>\n                                    {{/each}}\n                                </gs-title-block>\n                                \n                            </gs-title-block>\n                        </gs-row>\n                    {{/each}}\n                </gs-col>\n            </gs-row>\n        </gs-title-block>\n    {{/each}}\n    <gs-row>\n        <gs-col width=\"7\"></gs-col>\n        <gs-col width=\"3\">\n            <gs-link snippet=\"Gacha_Pool_Details?action=exit\"><Button>Exit</Button></gs-link>\n        </gs-col>\n    </gs-row>\n    \n    {{#if form.error}}\n        <gs-alert type=\"error\" message=\"{{form.error}}\"></gs-alert>\n    {{/if}}\n</gs-title-block>\n{{/if}}\n\n<script>\n    setTimeout(function(){\n        $('.datepicker').datepicker({\n            dateFormat:\"yy-mm-dd\",\n            separator:\"T\",\n            timeFormat: 'HH:mm'\n        });\n    }, 500);\n</script>","groups":[]},"Gacha_Subpool_Entry":{"shortCode":"Gacha_Subpool_Entry","name":"Gacha: Subpool Entry","scriptData":"{\n    \"action\": \"viewNew\",\n    \"GachaType\": \"Permanent\",\n    \"GachaId\": \"3\",\n    \"PoolIndex\": \"1\",\n    \"SubpoolIndex\": \"0\",\n    \"EntryIndex\": \"0\"\n    \n}","script":"Spark.setScriptData(\"form\", SnippetProcessor(Spark.getData().scriptData));\n\nfunction SnippetProcessor(data){\n    \n    var form = {};\n    form.GachaType = data.GachaType;\n    form.GachaId = data.GachaId;\n    form.PoolIndex = data.PoolIndex;\n    form.SubpoolIndex = data.SubpoolIndex;\n    form.EntryIndex = data.EntryIndex;\n    \n    switch(data.action){\n        case \"view\":\n            return view(data);\n        case \"viewNew\":\n            return viewNew(data);\n        case \"viewDelete\":\n            return viewDelete(data);\n        case \"create\":\n            return create(data);\n        case \"update\":\n            return update(data);\n        case \"delete\":\n            return deleteItem(data);\n        case \"exit\":\n            return exit(data);\n    }\n    \n    function view(data){\n        var config = Spark.getConfig();\n        \n        var entryData = GetGacha(data.GachaType, data.GachaId);\n        var parentPool = entryData.Pools[Number(data.PoolIndex)];\n        var subpool = parentPool.Subpools[Number(data.SubpoolIndex)];\n        var item = subpool.Contents[Number(data.EntryIndex)];\n        \n        form.PoolName = entryData.Name;\n        form.ParentPoolName = parentPool.Name;\n        form.SubpoolName = subpool.Name;\n        form.EntryIndex = data.EntryIndex;\n        \n        var gachaMetaData = GetGachaMetaData();\n        var poolTypes = gachaMetaData.PoolTypes;\n        \n        var currentPoolType = poolTypes[subpool.PoolType];\n        var list = GetList(currentPoolType);\n        for(var i = 0; i < list.length; i++){\n            if(list[i].ShortCode == item.ShortCode){\n                list[i].Selected = true;\n            }\n        }\n\n        form.List = list;\n        form.ShortCode = item.ShortCode;\n        form.Weight = item.Weight;\n        var vGood = config.getVirtualGood(item.ShortCode);\n        if(vGood === undefined || vGood === null){\n            form.vGoodError = true;\n            return form;\n        }\n        \n        form.ItemName = vGood.getName();\n        \n        return form;\n    }\n    \n    function viewNew(data){\n        var entryData = GetGacha(data.GachaType, data.GachaId);\n        var parentPool = entryData.Pools[Number(data.PoolIndex)];\n        var subpool = parentPool.Subpools[Number(data.SubpoolIndex)];\n        \n        form.PoolName = entryData.Name;\n        form.ParentPoolName = parentPool.Name;\n        form.SubpoolName = subpool.Name;\n        form.EntryIndex = subpool.Contents.length;\n        \n        var gachaMetaData = GetGachaMetaData();\n        var poolTypes = gachaMetaData.PoolTypes;\n        \n        var currentPoolType = poolTypes[subpool.PoolType];\n        var list = GetList(currentPoolType);\n\n        form.List = list;\n        form.Weight = 10;\n        form.new = true;\n        \n        return form;\n    }\n    \n    function viewDelete(data){\n        form.delete = true;\n        \n        return view(data);\n    }\n    \n    function update(data){\n        var parse = data.Item;\n        var itemData = parse.split(\"|\");\n        var updatedData = {\n            \"ShortCode\": itemData[0],\n            \"Name\": itemData[1],\n            \"Weight\": Number(data.Weight)\n        };\n        \n        var entryData = UpdatePool(data.GachaType, data.GachaId, Number(data.PoolIndex), Number(data.SubpoolIndex), Number(data.EntryIndex), updatedData);\n        if(entryData.error === true) {\n            form.duplicateError = true;\n            return view(data);\n        }\n\n        form.updated = true;\n        return view(data);\n    }\n    \n    function create(data){\n        var parse = data.Item;\n        var itemData = parse.split(\"|\");\n        var updatedData = {\n            \"ShortCode\": itemData[0],\n            \"Name\": itemData[1],\n            \"Weight\": Number(data.Weight)\n        };\n        \n        var entryData = UpdatePool(data.GachaType, data.GachaId, Number(data.PoolIndex), Number(data.SubpoolIndex), Number(data.EntryIndex), updatedData);\n        if(entryData.error === true) {\n            form.duplicateError = true;\n            form.EntryIndex = \"0\";\n            return viewNew(data);\n        }\n\n        form.updated = true;\n        return view(data);\n    }\n    \n    function deleteItem(data){\n        DeletePoolEntry(data.GachaType, data.GachaId, Number(data.PoolIndex), Number(data.SubpoolIndex), Number(data.EntryIndex));\n        form.exit = true;\n        return form;\n    }\n    \n    function exit(data){\n        form.exit = true;\n        return form;\n    }\n    \n    function GetGacha(gachaType, gachaId){\n        //Load API and get entry\n        var API = Spark.getGameDataService();\n        \n        //Attempt to get entry\n        var entryObject = API.getItem(\"Gacha\", gachaType + \"-\" + gachaId);\n        \n        //If error attempting to retrieve entry\n        if(entryObject.error()){\n            Spark.setScriptError(\"ERROR\", entryObject.error());\n            Spark.exit();\n        } else {\n            //Get entry\n            var entry = entryObject.document();\n            //Access Data\n            var entryData = entry.getData();\n            \n            return entryData;\n        }\n    }\n    \n    function GetList(poolType){\n        var list;\n        switch(poolType.Type){\n            case \"Shard\":\n                list = GetShardsList(poolType.Rarity);\n                break;\n            case \"Ingredient\":\n                list = GetIngredientsList(poolType.Rarity);\n                break;\n        }\n        \n        return list;\n    }\n    \n    function GetShardsList(rarity){\n        var config = Spark.getConfig();\n        var characters = GetCharactersByRarity(rarity);\n        var characterList = [];\n        for(var i = 0; i < characters.length; i++){\n            characterList.push(\n                {\n                    \"Name\": characters[i].Base.Name,\n                    \"ShortCode\": \"Shard_\" + characters[i].Base.CharacterId\n                }\n            );\n        }\n        \n        return characterList;\n    }\n    \n    function GetIngredientsList(rarity){\n        var config = Spark.getConfig();\n        var vGoods = config.getVirtualGoods();\n        var ingredientsList = [];\n        \n        for(var i = 0; i < vGoods.length; i++) {\n            if (vGoods[i].propertySet.ItemType.Type == \"Ingredient\" && vGoods[i].propertySet.Rarity.Value == rarity) {\n                ingredientsList.push({\n                    \"Name\": vGoods[i].name,\n                    \"ShortCode\": vGoods[i].shortCode\n                });\n            }\n        }\n        \n        return ingredientsList;\n    }\n    \n    function UpdatePool(gachaType, gachaId, poolIndex, subpoolIndex, entryIndex, updateData){\n        //Save entry and get its data object\n        var API = Spark.getGameDataService();\n    \n        //Attempt to get entry\n        var entryObject = API.getItem(\"Gacha\", gachaType + \"-\" + gachaId);\n        \n        //If error attempting to retrieve entry\n        if(entryObject.error()){\n            Spark.setScriptError(\"ERROR\", entryObject.error());\n            Spark.exit();\n        } else {\n            //Get entry\n            var entry = entryObject.document();\n            \n            //Access data\n            var entryData = entry.getData();\n            \n            //Check if character is not already in a pool\n            var contents = entryData.Pools[poolIndex].Subpools[subpoolIndex].Contents;\n            for(var i = 0; i < contents.length; i++){\n                if(contents[i].ShortCode == updateData.ShortCode){\n                    entryData.error = true;\n                    return entryData;\n                }\n            }\n\n            entryData.Pools[poolIndex].Subpools[subpoolIndex].Contents[entryIndex] = updateData;\n            \n            entryData = RecalculatePoolChances(entryData);\n            \n            var entryStatus = entry.persistor().withAtomicIncrements().persist().error();\n            if(entryStatus){\n                //Output error script\n                Spark.setScriptError(\"ERROR\", entryStatus);\n                form.error = entryStatus;\n            }\n            \n            return entryData;\n        }\n    }\n    \n    function DeletePoolEntry(gachaType, gachaId, poolIndex, subpoolIndex, entryIndex){\n        //Save entry and get its data object\n        var API = Spark.getGameDataService();\n    \n        //Attempt to get entry\n        var entryObject = API.getItem(\"Gacha\", gachaType + \"-\" + gachaId);\n        \n        //If error attempting to retrieve entry\n        if(entryObject.error()){\n            Spark.setScriptError(\"ERROR\", entryObject.error());\n            Spark.exit();\n        } else {\n            //Get entry\n            var entry = entryObject.document();\n            \n            //Access data\n            var entryData = entry.getData();\n\n            entryData.Pools[poolIndex].Subpools[subpoolIndex].Contents.splice(entryIndex, 1);\n            \n            \n            entryData = RecalculatePoolChances(entryData);\n            var entryStatus = entry.persistor().withAtomicIncrements().persist().error();\n            if(entryStatus){\n                //Output error script\n                Spark.setScriptError(\"ERROR\", entryStatus);\n                form.error = entryStatus;\n            }\n            \n            return entryData;\n        }\n    }\n    \n    function GetCharactersByRarity(rarity){\n        //Load API and get entry\n        var API = Spark.getGameDataService();\n    \n        var condition = API.N(\"CharacterId\").gt(0).and(API.N(\"Rarity\").eq(Number(rarity)));\n        var sortOrder = API.sort(\"CharacterId\", true);\n        var query = API.queryItems(\"Characters\", condition, sortOrder);\n        \n        if(query.error()){\n            //Output error script\n            Spark.setScriptError(\"ERROR\", query.error());\n            //Stop execution of script\n            Spark.exit();    \n        } else{\n             //Create empty object\n            var object = [];\n            //While there are still entries in the cursor retrieved from query\n            while(query.cursor().hasNext()){\n                //Get the entry\n                entry = query.cursor().next();\n                //Populate object with the entries. key = entry ID\n                entryData = entry.getData();\n                \n                object.push(entryData);\n            }\n        }\n        return object;\n    }\n    \n    function GetGachaMetaData(){\n        //Load API and get entry\n        var API = Spark.getGameDataService();\n        \n        //Attempt to get entry\n        var entryObject = API.getItem(\"MetaData\", \"Gacha\");\n        \n        //If error attempting to retrieve entry\n        if(entryObject.error()){\n            Spark.setScriptError(\"ERROR\", entryObject.error());\n            Spark.exit();\n        } else {\n            //Get entry\n            var entry = entryObject.document();\n            //Access Data\n            var entryData = entry.getData();\n            \n            return entryData;\n        }\n    }\n    \n    function RecalculatePoolChances(entryData){\n        //Calculate Pool\n        var poolTotalWeight = 0;\n        var subpoolTotalWeight = [];\n        var contentWeights = [];\n        var currentPool;\n        var currentSubpool;\n        var currentContent;\n        for(var poolIndex = 0; poolIndex < entryData.Pools.length; poolIndex++){\n            currentPool = entryData.Pools[poolIndex];\n            poolTotalWeight += currentPool.Weight;\n            subpoolTotalWeight.push(0);\n            contentWeights.push([]);\n            \n            for(var subpoolIndex = 0; subpoolIndex < currentPool.Subpools.length; subpoolIndex++){\n                currentSubpool = currentPool.Subpools[subpoolIndex];\n                subpoolTotalWeight[poolIndex] += currentSubpool.Weight;\n                contentWeights[poolIndex].push(0);\n                \n                for(var contentIndex = 0; contentIndex < currentSubpool.Contents.length; contentIndex++){\n                    currentContent = currentSubpool.Contents[contentIndex];\n                    contentWeights[poolIndex][subpoolIndex] += currentContent.Weight;\n                }\n            }\n        }\n        \n        for(poolIndex = 0; poolIndex < entryData.Pools.length; poolIndex++){\n            currentPool = entryData.Pools[poolIndex];\n            entryData.Pools[poolIndex].Chance = Math.round(((currentPool.Weight / poolTotalWeight) * 100) * 1000) / 1000;\n            \n            for(subpoolIndex = 0; subpoolIndex < currentPool.Subpools.length; subpoolIndex++){\n                currentSubpool = currentPool.Subpools[subpoolIndex];\n                entryData.Pools[poolIndex].Subpools[subpoolIndex].TotalChance = Math.round(((currentSubpool.Weight / subpoolTotalWeight[poolIndex]) * currentPool.Chance) * 1000) / 1000;\n                \n                for(contentIndex = 0; contentIndex < currentSubpool.Contents.length; contentIndex++){\n                    currentContent = currentSubpool.Contents[contentIndex];\n                    entryData.Pools[poolIndex].Subpools[subpoolIndex].Contents[contentIndex].TotalChance = Math.round(((currentContent.Weight / contentWeights[poolIndex][subpoolIndex]) * currentSubpool.TotalChance) * 1000) / 1000;\n                }\n            }\n        }\n        \n        return entryData;\n    }\n}\n\n","template":"{{#if form.exit}}\n    <gs-modal-close></gs-modal-close>\n    <gs-snippet snippet=\"Gacha_Pool_Details?action=view&GachaType={{form.GachaType}}&GachaId={{form.GachaId}}\" target=\"content\"></gs-snippet>\n{{else}}\n    <gs-title-block \n        {{#if form.delete}}\n            title=\"{{form.PoolName}} - {{form.ParentPoolName}} - {{form.SubpoolName}} - Deleting Entry - {{form.EntryIndex}}\"\n        {{else if form.new}}\n            title=\"{{form.PoolName}} - {{form.ParentPoolName}} - {{form.SubpoolName}} - Adding new Entry - {{form.EntryIndex}}\"\n        {{else}}\n            title=\"{{form.PoolName}} - {{form.ParentPoolName}} - {{form.SubpoolName}} - Updating Entry - {{form.EntryIndex}}\" \n        {{/if}}\n        padding=\"10\"\n    >\n        <gs-form\n            {{#if form.new}}\n                snippet=\"Gacha_Subpool_Entry?action=create&GachaType={{form.GachaType}}&GachaId={{form.GachaId}}&PoolIndex={{form.PoolIndex}}&SubpoolIndex={{form.SubpoolIndex}}&EntryIndex={{form.EntryIndex}}\" target=\"modal-small\"\n            {{else}}\n                snippet=\"Gacha_Subpool_Entry?action=update&GachaType={{form.GachaType}}&GachaId={{form.GachaId}}&PoolIndex={{form.PoolIndex}}&SubpoolIndex={{form.SubpoolIndex}}&EntryIndex={{form.EntryIndex}}\" target=\"modal-small\"\n            {{/if}}\n        >\n            {{#if form.ShortCode}}\n            <gs-row>\n                <gs-col width=\"2\">\n                    ShortCode:\n                </gs-col>\n                <gs-col width=\"2\">\n                    {{form.ShortCode}}\n                </gs-col>\n            </gs-row>\n            {{/if}}\n            {{#if form.ItemName}}\n            <gs-row>\n                <gs-col width=\"2\">\n                    Item Name:\n                </gs-col>\n                <gs-col width=\"2\">\n                    {{form.ItemName}}\n                </gs-col>\n            </gs-row>\n            {{/if}}\n            <gs-row>\n                <gs-col width=\"2\">\n                    Weight\n                </gs-col>\n                <gs-col width=\"6\">\n                    Drop\n                </gs-col>\n            </gs-row>\n            <gs-row>\n                <gs-col width=\"2\">\n                    <input type=\"number\" value=\"{{form.Weight}}\" name=\"Weight\" required {{#if form.delete}} disabled {{/if}}/>\n                </gs-col>\n                <gs-col width=\"6\">\n                    <select name=\"Item\" required {{#if form.delete}} disabled {{/if}}>\n                        {{#each form.List}}\n                            {{#if this.Selected}}\n                            <option value=\"{{this.ShortCode}}|{{this.Name}}|{{this.ItemName}}\" selected>{{this.Name}}</option>\n                            {{else}}\n                            <option value=\"{{this.ShortCode}}|{{this.Name}}|{{this.ItemName}}\">{{this.Name}}</option>\n                            {{/if}}\n                        {{/each}}\n                    </select>\n                </gs-col>\n            </gs-row>\n            <gs-row>\n                <gs-col width=\"5\"></gs-col>\n                <gs-col width=\"3\">\n                    {{#if form.delete}}\n                    <gs-link snippet=\"Gacha_Subpool_Entry?action=delete&GachaType={{form.GachaType}}&GachaId={{form.GachaId}}&PoolIndex={{form.PoolIndex}}&SubpoolIndex={{form.SubpoolIndex}}&EntryIndex={{form.EntryIndex}}\"><Button>Delete</Button></gs-link>\n                    {{else if form.new}}\n                    <gs-submit>Add new entry</gs-submit>\n                    {{else}}\n                    <gs-submit>Save Changes</gs-submit>\n                    {{/if}}\n                </gs-col>\n                <gs-col width=\"2\">\n                    <gs-link snippet=\"Gacha_Subpool_Entry?action=exit&GachaType={{form.GachaType}}&GachaId={{form.GachaId}}&PoolIndex={{form.PoolIndex}}&SubpoolIndex={{form.SubpoolIndex}}&EntryIndex={{form.EntryIndex}}\"><Button>Close</Button></gs-link>\n                </gs-col>\n            </gs-row>\n            <gs-row>\n                <gs-col width=\"7\"></gs-col>\n                <gs-col width=\"4\">\n                    {{#if form.updated}}\n                        <gs-alert type=\"success\" message=\"Saved\"></gs-alert>\n                    {{/if}}\n                    {{#if form.vGoodError}}\n                        <gs-alert type=\"error\" message=\"Virtual good does not exist\"></gs-alert>\n                    {{/if}}\n                    {{#if form.duplicateError}}\n                        <gs-alert type=\"error\" message=\"Duplicate Character or Item\"></gs-alert>\n                    {{/if}}\n                </gs-col>\n            </gs-row>\n        </gs-form>\n    </gs-title-block>\n{{/if}}","groups":[]},"MetaData_Character_Level_List":{"shortCode":"MetaData_Character_Level_List","name":"MetaData: Character Level List","scriptData":"","script":"Spark.setScriptData(\"form\", SnippetProcessor(Spark.getData().scriptData));\n\nfunction SnippetProcessor(data){\n    \n    var form = {};\n    \n    return view(data);\n    \n    function view(data){\n        \n        return form;\n    }\n    \n}","template":"<gs-title-block title=\"Tables\">\n    <gs-row>\n        <gs-col width=\"2\"><gs-link snippet=\"MetaData_Character_Level_Table?action=view&TableId=1\" target=\"modal-small\"><i class=\"icon-edit\"/></gs-link></gs-col>\n        <gs-col width=\"5\">Common Character Level Table</gs-col>\n        <gs-col width=\"2\"><gs-link snippet=\"MetaData_Character_Level_Table?action=view&TableId=1\" target=\"modal-small\"><i class=\"icon-edit\"/></gs-link></gs-col>\n    </gs-row>\n    <gs-row>\n        <gs-col width=\"2\"><gs-link snippet=\"MetaData_Character_Level_Table?action=view&TableId=2\" target=\"modal-small\"><i class=\"icon-edit\"/></gs-link></gs-col>\n        <gs-col width=\"5\">Rare Character Level Table</gs-col>\n        <gs-col width=\"2\"><gs-link snippet=\"MetaData_Character_Level_Table?action=view&TableId=2\" target=\"modal-small\"><i class=\"icon-edit\"/></gs-link></gs-col>\n    </gs-row>\n    <gs-row>\n        <gs-col width=\"2\"><gs-link snippet=\"MetaData_Character_Level_Table?action=view&TableId=3\" target=\"modal-small\"><i class=\"icon-edit\"/></gs-link></gs-col>\n        <gs-col width=\"5\">Epic Character Level Table</gs-col>\n        <gs-col width=\"2\"><gs-link snippet=\"MetaData_Character_Level_Table?action=view&TableId=3\" target=\"modal-small\"><i class=\"icon-edit\"/></gs-link></gs-col>\n    </gs-row>\n    <gs-row>\n        <gs-col width=\"2\"><gs-link snippet=\"MetaData_Character_Level_Table?action=view&TableId=4\" target=\"modal-small\"><i class=\"icon-edit\"/></gs-link></gs-col>\n        <gs-col width=\"5\">Legendary Character Level Table</gs-col>\n        <gs-col width=\"2\"><gs-link snippet=\"MetaData_Character_Level_Table?action=view&TableId=4\" target=\"modal-small\"><i class=\"icon-edit\"/></gs-link></gs-col>\n\n    </gs-row>\n</gs-title-block>","groups":[]},"MetaData_Character_Level_Master":{"shortCode":"MetaData_Character_Level_Master","name":"MetaData: Character Level Master","scriptData":"","script":"Spark.setScriptData(\"form\", SnippetProcessor(Spark.getData().scriptData))\n\nfunction SnippetProcessor(data){\n    \n    var form = {};\n    return view(data);\n    \n    function view(data){\n        \n        return form;\n    }\n}\n","template":"<gs-row>\n    <gs-col width=\"12\">\n        <gs-placeholder id=\"content\">\n            <gs-snippet snippet=\"MetaData_Character_Level_List\"></gs-snippet>\n        </gs-placeholder>\n    </gs-col>\n</gs-row>\n","groups":[]},"Gacha_Subpool_Manager":{"shortCode":"Gacha_Subpool_Manager","name":"Gacha: Subpool Manager","scriptData":"{\n    \"action\": \"viewNew\",\n    \"GachaType\": \"Permanent\",\n    \"GachaId\": \"3\",\n    \"PoolIndex\": \"0\",\n    \"SubpoolIndex\": \"1\"\n}","script":"Spark.setScriptData(\"form\", SnippetProcessor(Spark.getData().scriptData));\n\nfunction SnippetProcessor(data){\n    \n    var form = {};\n    form.GachaType = data.GachaType;\n    form.GachaId = data.GachaId;\n    form.PoolIndex = data.PoolIndex;\n    form.SubpoolIndex = data.SubpoolIndex;\n    \n    switch(data.action){\n        case \"view\":\n            return view(data);\n        case \"viewNew\":\n            return viewNew(data);\n        case \"viewDelete\":\n            return viewDelete(data);\n        case \"create\":\n            return create(data);\n        case \"update\":\n            return update(data);\n        case \"delete\":\n            return deleteItem(data);\n        case \"exit\":\n            return exit(data);\n    }\n    \n    function view(data){\n        var entryData = GetGacha(data.GachaType, data.GachaId);\n        form.data = entryData;\n        \n        form.PoolName = entryData.Name;\n        var parentPool = entryData.Pools[Number(data.PoolIndex)];\n        form.ParentPool = parentPool.Name;\n        var subpool = parentPool.Subpools[Number(data.SubpoolIndex)];\n        \n        var gachaMetaData = GetGachaMetaData();\n        var poolTypes = gachaMetaData.PoolTypes;\n        poolTypes[subpool.PoolType].Selected = true;\n        form.PoolTypes = poolTypes;\n        \n        form.Name = subpool.Name;\n        form.Weight = subpool.Weight;\n        form.Chance = subpool.Chance;\n        \n        return form;\n    }\n    \n    function viewNew(data){\n        var entryData = GetGacha(data.GachaType, data.GachaId);\n        form.data = entryData;\n        form.PoolName = entryData.Name;\n        var parentPool = entryData.Pools[Number(data.PoolIndex)];\n        form.ParentPool = parentPool.Name;\n        form.SubpoolIndex = parentPool.Subpools.length;\n        \n        var gachaMetaData = GetGachaMetaData();\n        var poolTypes = gachaMetaData.PoolTypes;\n        \n        poolTypes[0].Selected = true;\n        form.PoolTypes = poolTypes;\n        \n        form.new = true;\n        return form;\n    }\n    \n    function viewDelete(data){\n        var entryData = GetGacha(data.GachaType, data.GachaId);\n        form.data = entryData;\n        form.PoolName = entryData.Name;\n        var parentPool = entryData.Pools[Number(data.PoolIndex)];\n        if(parentPool.Subpools.length === 0){\n            form.deleteError = true;\n            return form;\n        }\n        form.ParentPool = parentPool.Name;\n        var subpoolIndex = parentPool.Subpools.length - 1;\n        form.SubpoolIndex = subpoolIndex;\n        var subpool = parentPool.Subpools[subpoolIndex];\n        \n        var gachaMetaData = GetGachaMetaData();\n        var poolTypes = gachaMetaData.PoolTypes;\n        poolTypes[subpool.PoolType].Selected = true;\n        form.PoolTypes = poolTypes;\n        \n        form.Name = subpool.Name;\n        form.Weight = subpool.Weight;\n        form.Chance = subpool.Chance;\n        form.delete = true;\n        return form;\n    }\n    \n    function create(data){\n        var updateData = {\n            \"Name\": data.Name,\n            \"Weight\": Number(data.Weight),\n            \"PoolType\": Number(data.PoolType)\n        };\n        var entryData = AddSubpool(data.GachaType, data.GachaId, Number(data.PoolIndex), updateData);\n        var subpoolIndex = entryData.Pools[data.PoolIndex].Subpools.length - 1;\n        var subpool = entryData.Pools[data.PoolIndex].Subpools[subpoolIndex];\n        \n        var gachaMetaData = GetGachaMetaData();\n        var poolTypes = gachaMetaData.PoolTypes;\n        poolTypes[subpool.PoolType].Selected = true;\n        form.PoolTypes = poolTypes;\n        \n        form.SubpoolIndex = subpoolIndex;\n        form.Name = subpool.Name;\n        form.Weight = subpool.Weight;\n        form.Chance = subpool.Chance;\n        form.updated = true;\n        return form;\n    }\n    \n    function update(data){\n        var updateData = {\n            \"Name\": data.Name,\n            \"Weight\": Number(data.Weight),\n            \"PoolType\": Number(data.PoolType)\n        };\n        var entryData = UpdateSubpool(data.GachaType, data.GachaId, Number(data.PoolIndex), Number(data.SubpoolIndex), updateData);\n        form.updated = true;\n        return view(data);\n    }\n    \n    function deleteItem(data){\n        DeleteSubpool(data.GachaType, data.GachaId, Number(data.PoolIndex));\n        form.exit = true;\n        return form;\n    }\n    \n    function exit(data){\n        form.exit = true;\n        return form;\n    }\n    \n    function AddSubpool(GachaType, GachaId, PoolIndex, UpdateData){\n        //Load API and get entry\n        var API = Spark.getGameDataService();\n        \n        //Attempt to get entry\n        var entryObject = API.getItem(\"Gacha\", GachaType + \"-\" + GachaId);\n        \n        //If error attempting to retrieve entry\n        if(entryObject.error()){\n            Spark.setScriptError(\"ERROR\", entryObject.error());\n            Spark.exit();\n        } else {\n            //Get entry\n            var entry = entryObject.document();\n            //Access Data\n            var entryData = entry.getData();\n        \n            var newSubpool = {\n                \"Weight\": UpdateData.Weight,\n                \"Name\": UpdateData.Name,\n                \"PoolType\": UpdateData.PoolType,\n                \"Chance\": 0,\n                \"Contents\": []\n            };\n            \n            entryData.Pools[PoolIndex].Subpools.push(newSubpool);\n            \n            entryData = RecalculatePoolChances(entryData);\n            //Persist and return any errors\n            var entryStatus = entry.persistor().persist().error();\n            \n            //If there are errors the entry would not persist and we can act on that information\n            if(entryStatus){\n                //Output error script\n                Spark.setScriptError(\"ERROR\", entryStatus);\n                entryData.error = entryStatus;\n            }\n            \n            return entryData;\n        }\n    }\n    \n    function DeleteSubpool(GachaType, GachaId, PoolIndex){\n        //Load API and get entry\n        var API = Spark.getGameDataService();\n        \n        //Attempt to get entry\n        var entryObject = API.getItem(\"Gacha\", GachaType + \"-\" + GachaId);\n        \n        //If error attempting to retrieve entry\n        if(entryObject.error()){\n            Spark.setScriptError(\"ERROR\", entryObject.error());\n            Spark.exit();\n        } else {\n            //Get entry\n            var entry = entryObject.document();\n            //Access Data\n            var entryData = entry.getData();\n        \n            entryData.Pools[PoolIndex].Subpools.pop();\n            \n            entryData = RecalculatePoolChances(entryData);\n            //Persist and return any errors\n            var entryStatus = entry.persistor().persist().error();\n            \n            //If there are errors the entry would not persist and we can act on that information\n            if(entryStatus){\n                //Output error script\n                Spark.setScriptError(\"ERROR\", entryStatus);\n                entryData.error = entryStatus;\n            }\n        \n            return entryData;\n        }\n    }\n    \n\tfunction UpdateSubpool(GachaType, GachaId, PoolIndex, SubpoolIndex, UpdateData){\n        //Load API and get entry\n        var API = Spark.getGameDataService();\n        \n        //Attempt to get entry\n        var entryObject = API.getItem(\"Gacha\", GachaType + \"-\" + GachaId);\n        \n        //If error attempting to retrieve entry\n        if(entryObject.error()){\n            Spark.setScriptError(\"ERROR\", entryObject.error());\n            Spark.exit();\n        } else {\n            //Get entry\n            var entry = entryObject.document();\n            //Access Data\n            var entryData = entry.getData();\n            \n            entryData.Pools[PoolIndex].Subpools[SubpoolIndex].Name = UpdateData.Name;\n            entryData.Pools[PoolIndex].Subpools[SubpoolIndex].Weight = UpdateData.Weight;\n            entryData.Pools[PoolIndex].Subpools[SubpoolIndex].PoolType = UpdateData.PoolType;\n            \n            \n            entryData = RecalculatePoolChances(entryData);\n            //Persist and return any errors\n            var entryStatus = entry.persistor().persist().error();\n            \n            //If there are errors the entry would not persist and we can act on that information\n            if(entryStatus){\n                //Output error script\n                Spark.setScriptError(\"ERROR\", entryStatus);\n                entryData.error = entryStatus;\n            }\n            return entryData;\n        }\n\t}\n\t\n\tfunction GetGacha(GachaType, GachaId){\n        //Load API and get entry\n        var API = Spark.getGameDataService();\n        \n        //Attempt to get entry\n        var entryObject = API.getItem(\"Gacha\", GachaType + \"-\" + GachaId);\n        \n        //If error attempting to retrieve entry\n        if(entryObject.error()){\n            Spark.setScriptError(\"ERROR\", entryObject.error());\n            Spark.exit();\n        } else {\n            //Get entry\n            var entry = entryObject.document();\n            //Access Data\n            var entryData = entry.getData();\n            \n            return entryData;\n        }\n    }\n    \n    function GetGachaMetaData(){\n        //Load API and get entry\n        var API = Spark.getGameDataService();\n        \n        //Attempt to get entry\n        var entryObject = API.getItem(\"MetaData\", \"Gacha\");\n        \n        //If error attempting to retrieve entry\n        if(entryObject.error()){\n            Spark.setScriptError(\"ERROR\", entryObject.error());\n            Spark.exit();\n        } else {\n            //Get entry\n            var entry = entryObject.document();\n            //Access Data\n            var entryData = entry.getData();\n            \n            return entryData;\n        }\n    }\n    \n    function RecalculatePoolChances(entryData){\n        //Calculate Pool\n        var poolTotalWeight = 0;\n        var subpoolTotalWeight = [];\n        var contentWeights = [];\n        var currentPool;\n        var currentSubpool;\n        var currentContent;\n        for(var poolIndex = 0; poolIndex < entryData.Pools.length; poolIndex++){\n            currentPool = entryData.Pools[poolIndex];\n            poolTotalWeight += currentPool.Weight;\n            subpoolTotalWeight.push(0);\n            contentWeights.push([]);\n            \n            for(var subpoolIndex = 0; subpoolIndex < currentPool.Subpools.length; subpoolIndex++){\n                currentSubpool = currentPool.Subpools[subpoolIndex];\n                subpoolTotalWeight[poolIndex] += currentSubpool.Weight;\n                contentWeights[poolIndex].push(0);\n                \n                for(var contentIndex = 0; contentIndex < currentSubpool.Contents.length; contentIndex++){\n                    currentContent = currentSubpool.Contents[contentIndex];\n                    contentWeights[poolIndex][subpoolIndex] += currentContent.Weight;\n                }\n            }\n        }\n        \n        for(poolIndex = 0; poolIndex < entryData.Pools.length; poolIndex++){\n            currentPool = entryData.Pools[poolIndex];\n            entryData.Pools[poolIndex].Chance = Math.round(((currentPool.Weight / poolTotalWeight) * 100) * 1000) / 1000;\n            \n            for(subpoolIndex = 0; subpoolIndex < currentPool.Subpools.length; subpoolIndex++){\n                currentSubpool = currentPool.Subpools[subpoolIndex];\n                entryData.Pools[poolIndex].Subpools[subpoolIndex].Chance = Math.round(((currentSubpool.Weight / subpoolTotalWeight[poolIndex]) * 100) * 1000) / 1000;\n                entryData.Pools[poolIndex].Subpools[subpoolIndex].TotalChance = Math.round(((currentSubpool.Weight / subpoolTotalWeight[poolIndex]) * currentPool.Chance) * 1000) / 1000;\n                \n                for(contentIndex = 0; contentIndex < currentSubpool.Contents.length; contentIndex++){\n                    currentContent = currentSubpool.Contents[contentIndex];\n                    entryData.Pools[poolIndex].Subpools[subpoolIndex].Contents[contentIndex].Chance = Math.round(((currentContent.Weight / contentWeights[poolIndex][subpoolIndex]) * 100) * 1000) / 1000;\n                    entryData.Pools[poolIndex].Subpools[subpoolIndex].Contents[contentIndex].TotalChance = Math.round(((currentContent.Weight / contentWeights[poolIndex][subpoolIndex]) * currentSubpool.TotalChance) * 1000) / 1000;\n                }\n            }\n        }\n        \n        return entryData;\n    }\n}\n\n","template":"{{#if form.exit}}\n    <gs-modal-close></gs-modal-close>\n    <gs-snippet snippet=\"Gacha_Pool_Details?action=view&GachaType={{form.GachaType}}&GachaId={{form.GachaId}}&PoolIndex={{form.PoolIndex}}\" target=\"content\"></gs-snippet>\n{{else if form.deleteError}}\n    <gs-title-block title=\"Subpool Manager\">\n        <gs-row>\n            <gs-col width=\"12\">\n                Nothing to delete\n            </gs-col>\n        </gs-row>\n        <gs-row>\n            <gs-col width=\"9\"></gs-col>\n            <gs-col width=\"2\">\n                <gs-link snippet=\"Gacha_Subpool_Manager?action=exit&GachaType={{form.GachaType}}&GachaId={{form.GachaId}}&PoolIndex={{form.PoolIndex}}\"><Button>Close</Button></gs-link>\n            </gs-col>\n        </gs-row>\n    </gs-title-block>\n{{else}}\n    <gs-title-block \n        {{#if form.delete}}\n            title=\"{{form.PoolName}}: {{form.ParentPool}}: Deleting Subpool\"\n        {{else if form.new}}\n            title=\"{{form.PoolName}}: {{form.ParentPool}}: Adding new Subpool\"\n        {{else}}\n            title=\"{{form.PoolName}}: {{form.ParentPool}}: Updating Subpool\" \n        {{/if}}\n        padding=\"10\"\n    >\n        <gs-form\n            {{#if form.new}}\n            snippet=\"Gacha_Subpool_Manager?action=create&GachaType={{form.GachaType}}&GachaId={{form.GachaId}}&PoolIndex={{form.PoolIndex}}\" target=\"modal-small\"\n            {{else}}\n            snippet=\"Gacha_Subpool_Manager?action=update&GachaType={{form.GachaType}}&GachaId={{form.GachaId}}&PoolIndex={{form.PoolIndex}}&SubpoolIndex={{form.SubpoolIndex}}\" target=\"modal-small\"\n            {{/if}}\n        >\n            <gs-row>\n                <gs-col width=\"2\">\n                    Type\n                </gs-col>\n                <gs-col width=\"6\">\n                    <select name=\"PoolType\" {{#if form.delete}} disabled {{/if}}>\n                        {{#each form.PoolTypes}}\n                            {{#if this.Selected}}\n                                <option value=\"{{@index}}\" selected>{{this.Name}}</option>\n                            {{else}}\n                                <option value=\"{{@index}}\">{{this.Name}}</option>\n                            {{/if}}\n                        {{/each}}\n                    </select>\n                </gs-col>\n            </gs-row>\n            <gs-row>\n                <gs-col width=\"2\">\n                    Index\n                </gs-col>\n                <gs-col width=\"3\">\n                    Name\n                </gs-col>\n                <gs-col width=\"3\">\n                    Weight\n                </gs-col>\n                <gs-col width=\"2\">\n                    Chance\n                </gs-col>\n            </gs-row>\n            <gs-row>\n                <gs-col width=\"2\">\n                    <input type=\"number\" value=\"{{form.SubpoolIndex}}\" name=\"Subpool\" disabled>\n                </gs-col>\n                <gs-col width=\"3\">\n                    <input type=\"text\" name=\"Name\" value=\"{{form.Name}}\" {{#if form.delete}} disabled {{/if}} required>\n                </gs-col>\n                <gs-col width=\"3\">\n                    <input type=\"number\" name=\"Weight\" value=\"{{form.Weight}}\" {{#if form.delete}} disabled {{/if}} required>\n                </gs-col>\n                <gs-col width=\"2\">\n                    <input type=\"number\" name=\"Chance\" value =\"{{form.Chance}}\" disabled>\n                </gs-col>\n            </gs-row>\n            <gs-row>\n                <gs-col width=\"5\"></gs-col>\n                <gs-col width=\"3\">\n                    {{#if form.delete}}\n                    <gs-link snippet=\"Gacha_Subpool_Manager?action=delete&GachaType={{form.GachaType}}&GachaId={{form.GachaId}}&PoolIndex={{form.PoolIndex}}&SubpoolIndex={{form.SubpoolIndex}}\"><Button>Delete</Button></gs-link>\n                    {{else if form.new}}\n                    <gs-submit>Create subpool</gs-submit>\n                    {{else}}\n                    <gs-submit>Save Changes</gs-submit>\n                    {{/if}}\n                </gs-col>\n                <gs-col width=\"2\">\n                    <gs-link snippet=\"Gacha_Subpool_Manager?action=exit&GachaType={{form.GachaType}}&GachaId={{form.GachaId}}&PoolIndex={{form.PoolIndex}}\"><Button>Close</Button></gs-link>\n                </gs-col>\n            </gs-row>\n            <gs-row>\n                <gs-col width=\"7\"></gs-col>\n                <gs-col width=\"4\">\n                    {{#if form.updated}}\n                        <gs-alert type=\"success\" message=\"Saved\"></gs-alert>\n                    {{/if}}\n                    {{#if form.duplicateError}}\n                        <gs-alert type=\"error\" message=\"Duplicate Character\"></gs-alert>\n                    {{/if}}\n                </gs-col>\n            </gs-row>\n        </gs-form>\n    </gs-title-block>\n{{/if}}","groups":[]},"MetaData_Character_Level_Table":{"shortCode":"MetaData_Character_Level_Table","name":"MetaData: Character Level Table","scriptData":"{\n    \"TableId\": 1,\n    \"action\": \"view\"\n}","script":"Spark.setScriptData(\"form\", SnippetProcessor(Spark.getData().scriptData));\n\nfunction SnippetProcessor(data){\n    \n    var form = {};\n    var TableId = data.TableId;\n    form.TableId = TableId;\n    \n    switch(data.action){\n        case \"view\":\n            return view(data);\n        case \"update\":\n            return update(data);\n        case \"exit\":\n            return exit(data);\n    }\n    \n    function view(data){\n        //Load API and get entry\n        var API = Spark.getGameDataService();\n        \n        //Attempt to get entry\n        var entryObject = API.getItem(\"MetaData\", \"CharacterLevel\" + TableId);\n        \n         //If error attempting to retrieve entry\n        if(entryObject.error()){\n            Spark.setScriptError(\"ERROR\", entryObject.error());\n            Spark.exit();\n        } else {\n            //Get entry\n            var entry = entryObject.document();\n            //Access Data\n            var result = entry.getData();\n            \n            form.data = result;\n        }\n        return form;\n    }\n    \n    function update(data){\n        //Load API and get entry\n        var API = Spark.getGameDataService();\n        \n        //Attempt to get entry\n        var entryObject = API.getItem(\"MetaData\", \"CharacterLevel\" + TableId);\n        \n        //If error attempting to retrieve entry\n        if(entryObject.error()){\n            Spark.setScriptError(\"ERROR\", entryObject.error());\n            Spark.exit();\n        } else {\n            //Get entry\n            var entry = entryObject.document();\n            //Access Data\n            var entryData = entry.getData();\n            \n            var previousIncrease = 0;\n            var basePoints = entryData.Levels[1].Total;\n            for(var i = 1; i <= 100; i++){\n                value = data[\"Increase\" + i.toString()];\n                entryData.Levels[i].Increase = Number(value);\n                entryData.Levels[i].Total = entryData.Levels[i - 1].Total + Number(value);\n                previousIncrease = value;\n            }\n            \n            form.data = entryData;\n            form.success = true;\n            form.updated = true;\n            \n            //Persist and return any errors\n            var status = entry.persistor().persist().error();\n    \n            //If there are errors the entry would not persist and we can act on that information\n            if(status){\n            //Output error script\n                Spark.setScriptError(\"ERROR\", status);\n                //Stop execution of script\n                Spark.exit();\n            }\n        }\n        \n        return form;\n    }\n    \n    function exit(data){\n        form.exit = true;\n        return form;\n    }\n    \n    \n    \n}","template":"{{#if form.exit}}\n    <gs-modal-close></gs-modal-close>\n    <gs-snippet snippet=\"MetaData_Character_Level_List\"></gs-snippet>\n{{else}}\n    <gs-form snippet=\"MetaData_Character_Level_Table?action=update&TableId={{form.TableId}}\" target=\"modal-small\">\n        <gs-title-block title=\"Character Level Table: {{form.TableId}}\" padding=\"5\">\n            <gs-row>\n                <gs-col width=\"2\">Level</gs-col>\n                <gs-col width=\"3\">Total Points</gs-col>\n                <gs-col width=\"3\">Increase</gs-col>\n            </gs-row>\n            {{#each form.data.Levels}}\n                <gs-row>\n                    <gs-col width=\"2\">{{@index}}</gs-col>\n                    <gs-col width=\"3\">{{this.Total}}</gs-col>\n                    <gs-col width=\"3\">\n                        <input value=\"{{this.Increase}}\" type=\"number\" required name=\"Increase{{@index}}\"/>\n                    </gs-col>\n                </gs-row>\n            {{/each}}\n            \n            <gs-row>\n                <gs-col width=\"4\" offset=\"1\">\n                {{#if form.updated}}\n                    {{#if form.success}}\n                        <gs-alert type=\"success\" message=\"Saved!\"></gs-alert>\n                    {{else}}\n                        <gs-alert type=\"error\" message=\"{{error}}\"></gs-alert>\n                    {{/if}}\n                {{/if}}\n                </gs-col>\n                <gs-col width=\"3\">\n                    <gs-submit>Save Changes</gs-submit>\n                </gs-col>\n                <gs-col width=\"1\">\n                    <gs-link snippet=\"MetaData_Character_Level_Table?action=exit\"><Button>Close</Button></gs-link>\n                </gs-col>\n            </gs-row>\n        </gs-title-block>\n    </gs-form>\n{{/if}}","groups":[]},"Store_Item_Details":{"shortCode":"Store_Item_Details","name":"Store: Item Store Details","scriptData":"{\n    \"action\": \"view\",\n    \"Store_Item_Id\": \"1\"\n}","script":"Spark.setScriptData(\"form\", SnippetProcessor(Spark.getData().scriptData));\n\nfunction SnippetProcessor(data){\n    \n    var form = {};\n    form.Store_Item_Id = data.Store_Item_Id;\n    \n    form.SortedList = [\n        {\n            \"Title\": \"Ingredient_1\",\n            \"ItemType\": \"Ingredient\",\n            \"Rarity\": \"1\",\n            \"Contents\": []\n        },\n        {\n            \"Title\": \"Ingredient_2\",\n            \"ItemType\": \"Ingredient\",\n            \"Rarity\": \"2\",\n            \"Contents\": []\n        },\n        {\n            \"Title\": \"Ingredient_3\",\n            \"ItemType\": \"Ingredient\",\n            \"Rarity\": \"3\",\n            \"Contents\": []\n        },\n        {\n            \"Title\": \"Ingredient_4\",\n            \"ItemType\": \"Ingredient\",\n            \"Rarity\": \"4\",\n            \"Contents\": []\n        },\n        {\n            \"Title\": \"Character_1\",\n            \"ItemType\": \"Shard\",\n            \"Rarity\": \"1\",\n            \"Contents\": []\n        },\n        {\n            \"Title\": \"Character_2\",\n            \"ItemType\": \"Shard\",\n            \"Rarity\": \"2\",\n            \"Contents\": []\n        },\n        {\n            \"Title\": \"Character_3\",\n            \"ItemType\": \"Shard\",\n            \"Rarity\": \"3\",\n            \"Contents\": []\n        },\n        {\n            \"Title\": \"Character_4\",\n            \"ItemType\": \"Shard\",\n            \"Rarity\": \"4\",\n            \"Contents\": []\n        },\n        \n    ];\n    \n    switch(data.action){\n        case \"view\":\n            return view(data);\n    }\n    \n    function view(data){\n        var entryData = GetItemStoreData(data.Store_Item_Id);\n        var config = Spark.getConfig();\n        var keys = Object.keys(entryData.Contents);\n        for (var i = 0; i < keys.length; i++){\n            var vgood = config.getVirtualGood(keys[i]);\n            var propertySet = vgood.getPropertySet();\n            entryData.Contents[keys[i]].Name = vgood.name;\n            entryData.Contents[keys[i]].ItemType = propertySet.ItemType.Type;\n            entryData.Contents[keys[i]].Costs = vgood.currencyCosts;\n            if(propertySet.ItemType.Type === \"Ingredient\"){\n                entryData.Contents[keys[i]].Rarity = propertySet.Rarity.Value;\n            } else if (propertySet.ItemType.Type ===\"Shard\"){\n                var characterId = entryData.Contents[keys[i]].ShortCode.split(\"_\")[1];\n                var characterData = GetCharacterData(characterId);\n                entryData.Contents[keys[i]].Rarity = characterData.Base.Rarity;\n            }\n            \n            SortByItemType(entryData.Contents[keys[i]]);\n        }\n        \n        form.MinLevel = entryData.MinLevel;\n        form.MaxLevel = entryData.MaxLevel;\n        \n        return form;\n    }\n    \n    function SortByItemType(itemObject){\n        switch(itemObject.ItemType){\n            case \"Shard\":\n                SortShardByRarity(itemObject);\n                break;\n            case \"Ingredient\":\n                SortIngredientByRarity(itemObject);\n                break;\n        }\n    }\n    \n    function SortIngredientByRarity(itemObject){\n        switch(itemObject.Rarity){\n            case 1:\n                form.SortedList[0].Contents.push(itemObject);\n                break;\n            case 2:\n                form.SortedList[1].Contents.push(itemObject);\n                break;\n            case 3:\n                form.SortedList[2].Contents.push(itemObject);\n                break;\n            case 4:\n                form.SortedList[3].Contents.push(itemObject);\n                break;\n        }\n    }\n    \n    function SortShardByRarity(itemObject){\n        switch(itemObject.Rarity){\n            case 1:\n                form.SortedList[4].Contents.push(itemObject);\n                break;\n            case 2:\n                form.SortedList[5].Contents.push(itemObject);\n                break;\n            case 3:\n                form.SortedList[6].Contents.push(itemObject);\n                break;\n            case 4:\n                form.SortedList[7].Contents.push(itemObject);\n                break;\n        }\n    }\n    \n    function GetItemStoreData(StoreItemId){\n        //Load API and get entry\n        var API = Spark.getGameDataService();\n        \n        //Attempt to get entry\n        var entryObject = API.getItem(\"Stores\", \"ItemStore\" + StoreItemId);\n        \n        //If error attempting to retrieve entry\n        if(entryObject.error()){\n            Spark.setScriptError(\"ERROR\", entryObject.error());\n            Spark.exit();\n        } else {\n            //Get entry\n            var entry = entryObject.document();\n            //Access Data\n            var entryData = entry.getData();\n            \n            return entryData;\n        }\n    }\n    \n    function GetCharacterData(characterId){\n        //Load API and get entry\n        var API = Spark.getGameDataService();\n        \n        //Attempt to get entry\n        var entryObject = API.getItem(\"Characters\", characterId);\n        \n        //If error attempting to retrieve entry\n        if(entryObject.error()){\n            Spark.setScriptError(\"ERROR\", entryObject.error());\n            Spark.exit();\n        } else {\n            //Get entry\n            var entry = entryObject.document();\n            //Access Data\n            var entryData = entry.getData();\n            \n            return entryData;\n        }\n    }\n}\n\n\n","template":"<gs-title-block title=\"Level Range {{form.MinLevel}} - {{form.MaxLevel}}\">\n    <gs-row>\n        <gs-col width=\"3\">\n            <gs-link snippet=\"Store_Item_List\" target=\"content\"><button>Back</button></gs-link>\n        </gs-col>\n    </gs-row>\n    \n    {{#each form.SortedList}}\n    <gs-title-block title=\"{{this.Title}}\" width=\"11\">\n        <gs-row>\n            <gs-col width=\"2\">\n                ItemShortCode\n            </gs-col>\n            <gs-col width=\"4\">\n                Item\n            </gs-col>\n            <gs-col width=\"2\">\n                Quantity\n            </gs-col>\n            <gs-col width=\"2\">\n                <gs-link snippet=\"Store_Item_Entry?action=viewNew&Store_Item_Id={{../form.Store_Item_Id}}&ItemType={{this.ItemType}}&Rarity={{this.Rarity}}\" target=\"modal-small\"><button>Add Item</button></gs-link>\n            </gs-col>\n        </gs-row>\n        {{#each this.Contents}}\n        <gs-row>\n            <gs-col width=\"2\">\n                {{this.ShortCode}}\n            </gs-col>\n            <gs-col width=\"4\">\n                {{this.Name}}\n            </gs-col>\n            <gs-col width=\"2\">\n                {{this.Quantity}}\n            </gs-col>\n            <gs-col width=\"2\">\n                <gs-link snippet=\"Store_Item_Entry?action=view&Store_Item_Id={{../../form.Store_Item_Id}}&ShortCode={{this.ShortCode}}&ItemType={{this.ItemType}}&Rarity={{this.Rarity}}\" target=\"modal-small\"><button>Edit</button></gs-link>\n            </gs-col>\n            <gs-col width=\"2\">\n                <gs-link snippet=\"Store_Item_Entry?action=viewDelete&Store_Item_Id={{../../form.Store_Item_Id}}&ShortCode={{this.ShortCode}}&ItemType={{this.ItemType}}&Rarity={{this.Rarity}}\" target='modal-small'><button>Delete</button></gs-link>\n            </gs-col>\n        </gs-row>\n        {{/each}}\n    </gs-title-block>\n    {{/each}}\n    <gs-row>\n        <gs-col width=\"3\">\n            <gs-link snippet=\"Store_Item_List\" target=\"content\"><button>Back</button></gs-link>\n        </gs-col>\n    </gs-row>\n</gs-title-block>","groups":[]},"Store_Item_Entry":{"shortCode":"Store_Item_Entry","name":"Store: Item Store Entry","scriptData":"{\n    \"action\": \"viewDelete\",\n    \"Store_Item_Id\": 1,\n    \"ShortCode\": \"Carbs_1\",\n    \"ItemType\": \"Ingredient\",\n    \"Rarity\": \"1\"\n}","script":"Spark.setScriptData(\"form\", SnippetProcessor(Spark.getData().scriptData));\n\nfunction SnippetProcessor(data){\n    \n    var form = {};\n    form.Store_Item_Id = data.Store_Item_Id;\n    form.ItemType = data.ItemType;\n    form.Rarity = data.Rarity;\n\n    switch(data.action){\n        case \"view\":\n            return view(data);\n        case \"viewNew\":\n            return viewNew(data);\n        case \"viewDelete\":\n            return viewDelete(data);\n        case \"exit\":\n            return exit(data);\n        case \"create\":\n            return create(data);\n        case \"update\":\n            return update(data);\n        case \"delete\":\n            return deleteItem(data);\n    }\n    \n    function view(data){\n        var entryData = GetItemStoreData(data.Store_Item_Id);\n        var previous = entryData.Contents[data.ShortCode];\n        form.ShortCode = data.ShortCode;\n        form.Quantity = previous.Quantity;\n        \n        form.data = entryData;\n        form.ItemList = GetList(data);\n        for(var i = 0; i < form.ItemList.length; i++){\n            if(form.ItemList[i].ShortCode == data.ShortCode){\n                form.ItemList[i].Selected = true;\n            }\n        }\n        return form;\n    }\n    \n    function viewNew(data){\n        form.ItemList = GetList(data);\n        form.New = true;\n        return form;\n    }\n    \n    function viewDelete(data){\n        var entryData = GetItemStoreData(data.Store_Item_Id);\n        var previous = entryData.Contents[data.ShortCode];\n        form.ShortCode = data.ShortCode;\n        form.Quantity = previous.Quantity;\n        \n        form.ItemList = GetList(data);\n        for(var i = 0; i < form.ItemList.length; i++){\n            if(form.ItemList[i].ShortCode == data.ShortCode){\n                form.ItemList[i].Selected = true;\n            }\n        }\n        \n        form.Delete = true;\n        return form;\n    }\n    \n    function exit(data){\n        form.Exit = true;\n        return form;\n    }\n    \n    function create(data){\n        var updatedData = {\n            \"ShortCode\": data.ShortCode,\n            \"Quantity\": Number(data.Quantity)\n        };\n        \n        UpdateItemStoreEntry(data.Store_Item_Id, updatedData);\n        form.Updated = true;\n        return view(data);\n    }\n    \n    function update(data){\n        var updatedData = {\n            \"ShortCode\": data.ShortCode,\n            \"Quantity\": Number(data.Quantity)\n        };\n        \n        UpdateItemStoreEntry(data.Store_Item_Id, updatedData);\n        form.Updated = true;\n        return view(data);\n    }\n    \n    function deleteItem(data){\n        DeleteItemStoreEntry(data.Store_Item_Id, data.ShortCode);\n        return exit(data);\n    }\n    \n    function GetItemStoreData(StoreItemId){\n        //Load API and get entry\n        var API = Spark.getGameDataService();\n        \n        //Attempt to get entry\n        var entryObject = API.getItem(\"Stores\", \"ItemStore\" + StoreItemId);\n        \n        //If error attempting to retrieve entry\n        if(entryObject.error()){\n            Spark.setScriptError(\"ERROR\", entryObject.error());\n            Spark.exit();\n        } else {\n            //Get entry\n            var entry = entryObject.document();\n            //Access Data\n            var entryData = entry.getData();\n            \n            return entryData;\n        }\n    }\n    \n    function UpdateItemStoreEntry(itemStoreId, data){\n        //Save entry and get its data object\n        var API = Spark.getGameDataService();\n    \n        //Attempt to get entry\n        var entryObject = API.getItem(\"Stores\", \"ItemStore\" + itemStoreId);\n        \n        //If error attempting to retrieve entry\n        if(entryObject.error()){\n            Spark.setScriptError(\"ERROR\", entryObject.error());\n            Spark.exit();\n        } else {\n            //Get entry\n            var entry = entryObject.document();\n            \n            //Access data\n            var entryData = entry.getData();\n            \n            entryData.LastUpdated = new Date().toISOString();\n            entryData.Contents[data.ShortCode] = data;\n            \n            var entryStatus = entry.persistor().withAtomicIncrements().persist().error();\n            if(entryStatus){\n                //Output error script\n                Spark.setScriptError(\"ERROR\", entryStatus);\n                form.error = entryStatus;\n            }\n            \n            return entryData;\n        }\n    }\n    \n    function DeleteItemStoreEntry(itemStoreId, shortCode){\n        //Save entry and get its data object\n        var API = Spark.getGameDataService();\n    \n        //Attempt to get entry\n        var entryObject = API.getItem(\"Stores\", \"ItemStore\" + itemStoreId);\n        \n        //If error attempting to retrieve entry\n        if(entryObject.error()){\n            Spark.setScriptError(\"ERROR\", entryObject.error());\n            Spark.exit();\n        } else {\n            //Get entry\n            var entry = entryObject.document();\n            \n            //Access data\n            var entryData = entry.getData();\n            \n            delete(entryData.Contents[shortCode]);\n            \n            var entryStatus = entry.persistor().withAtomicIncrements().persist().error();\n            if(entryStatus){\n                //Output error script\n                Spark.setScriptError(\"ERROR\", entryStatus);\n                form.error = entryStatus;\n            }\n            \n            return entryData;\n        }\n    }\n    \n    function GetList(data){\n        switch(data.ItemType){\n            case \"Ingredient\":\n                return GetIngredientsList(data.Rarity);\n            case \"Shard\":\n                return GetShardsList(data.Rarity);\n        }\n    }\n    \n    function GetShardsList(rarity){\n        var config = Spark.getConfig();\n        var characters = GetCharactersByRarity(rarity);\n        var characterList = [];\n        for(var i = 0; i < characters.length; i++){\n            characterList.push(\n                {\n                    \"Name\": characters[i].Base.Name,\n                    \"ShortCode\": \"Shard_\" + characters[i].Base.CharacterId\n                }\n            );\n        }\n        \n        return characterList;\n    }\n    \n    function GetCharactersByRarity(rarity){\n        //Load API and get entry\n        var API = Spark.getGameDataService();\n    \n        var condition = API.N(\"CharacterId\").gt(0).and(API.N(\"Rarity\").eq(Number(rarity)));\n        var sortOrder = API.sort(\"CharacterId\", true);\n        var query = API.queryItems(\"Characters\", condition, sortOrder);\n        \n        if(query.error()){\n            //Output error script\n            Spark.setScriptError(\"ERROR\", query.error());\n            //Stop execution of script\n            Spark.exit();    \n        } else{\n             //Create empty object\n            var object = [];\n            //While there are still entries in the cursor retrieved from query\n            while(query.cursor().hasNext()){\n                //Get the entry\n                entry = query.cursor().next();\n                //Populate object with the entries. key = entry ID\n                entryData = entry.getData();\n                \n                object.push(entryData);\n            }\n            return object;\n        }\n        \n    }\n    \n    function GetIngredientsList(rarity){\n        var config = Spark.getConfig();\n        var vGoods = config.getVirtualGoods();\n        var ingredientsList = [];\n        \n        for(var i = 0; i < vGoods.length; i++) {\n            if (vGoods[i].propertySet.ItemType.Type == \"Ingredient\" && vGoods[i].propertySet.Rarity.Value == rarity) {\n                ingredientsList.push({\n                    \"Name\": vGoods[i].name,\n                    \"ShortCode\": vGoods[i].shortCode\n                });\n            }\n        }\n        \n        return ingredientsList;\n    }\n    \n    function GetCharacterData(characterId){\n        //Load API and get entry\n        var API = Spark.getGameDataService();\n        \n        //Attempt to get entry\n        var entryObject = API.getItem(\"Characters\", characterId);\n        \n        //If error attempting to retrieve entry\n        if(entryObject.error()){\n            Spark.setScriptError(\"ERROR\", entryObject.error());\n            Spark.exit();\n        } else {\n            //Get entry\n            var entry = entryObject.document();\n            //Access Data\n            var entryData = entry.getData();\n            \n            return entryData;\n        }\n    }\n}","template":"{{#if form.Exit}}\n    <gs-modal-close></gs-modal-close>\n    <gs-snippet snippet=\"Store_Item_Details?action=view&Store_Item_Id={{form.Store_Item_Id}}\" target=\"content\"></gs-snippet>\n{{else}}\n<gs-title-block \n    {{#if form.New}}\n    title=\"Add Item Store Entry\"\n    {{else if form.Delete}}\n    title=\"Delete Item Store Entry\"\n    {{else}}\n    title=\"Update Item Store Entry\"\n    {{/if}}\n>\n    <gs-row>\n        <gs-col width=\"1\"></gs-col>\n        <gs-col width=\"6\">\n            Item\n        </gs-col>\n        <gs-col width=\"2\">\n            Quantity\n        </gs-col>\n    </gs-row>\n    <gs-form \n        {{#if form.New}}\n        snippet=\"Store_Item_Entry?action=create&Store_Item_Id={{form.Store_Item_Id}}&ItemType={{form.ItemType}}&Rarity={{form.Rarity}}\" target=\"modal-small\"\n        {{else}}\n        snippet=\"Store_Item_Entry?action=update&Store_Item_Id={{form.Store_Item_Id}}&ItemType={{form.ItemType}}&Rarity={{form.Rarity}}\" target=\"modal-small\"\n        {{/if}}\n    >\n        <gs-row>\n            <gs-col width=\"1\"></gs-col>\n            <gs-col width=\"6\">\n                <select name=\"ShortCode\" {{#unless form.New}} disabled {{/unless}}>\n                    {{#each form.ItemList}}\n                        {{#if this.Selected}}\n                        <option value=\"{{this.ShortCode}}\" selected>{{this.Name}}</option>\n                        {{else}}\n                        <option value=\"{{this.ShortCode}}\">{{this.Name}}</option>\n                        {{/if}}\n                    {{/each}}\n                </select>\n                {{#unless form.New}}\n                <input type=\"hidden\" name=\"ShortCode\" value=\"{{form.ShortCode}}\"/>\n                {{/unless}}\n            </gs-col>\n            <gs-col width=\"2\">\n                <input type=\"number\" name=\"Quantity\" value=\"{{form.Quantity}}\" required {{#if form.Delete}} disabled {{/if}}>\n            </gs-col>\n            <gs-row>\n                <gs-col width=\"6\"></gs-col>\n                <gs-col width=\"3\">\n                    {{#if form.Delete}}\n                    <gs-link snippet=\"Store_Item_Entry?action=delete&Store_Item_Id={{form.Store_Item_Id}}&ShortCode={{form.ShortCode}}&ItemType={{form.ItemType}}&Rarity={{form.Rarity}}\"><button>Delete</button></gs-link>\n                    {{else}}\n                    <gs-submit>\n                        {{#if form.New}}\n                        Add Item\n                        {{else if form.Delete}}\n                        Delete Item\n                        {{else}}\n                        Save Changes\n                        {{/if}}\n                    </gs-submit>\n                    {{/if}}\n                </gs-col>\n                \n                <gs-col width=\"3\">\n                    <gs-link snippet=\"Store_Item_Entry?action=exit&Store_Item_Id={{form.Store_Item_Id}}\"><button>Close</button></gs-link>\n                </gs-col>\n            </gs-row>\n        </gs-row>\n    </gs-form>\n</gs-title-block>\n{{/if}}\n\n\n","groups":[]},"Store_Item_List":{"shortCode":"Store_Item_List","name":"Store: Item List","scriptData":"","script":"Spark.setScriptData(\"form\", SnippetProcessor(Spark.getData().scriptData));\n\nfunction SnippetProcessor(data){\n    \n    var form = {};\n    return view(data);\n    \n    function view(data){\n        form.Stores = GetItemStores();\n        return form;\n    }\n    \n    function GetItemStores(){\n        //Load API and get entry\n        var API = Spark.getGameDataService();\n    \n        var condition = API.N(\"Id\").gt(0).and(API.S(\"Type\").eq(\"Item\"));\n        var sortOrder = API.sort(\"Id\", true);\n        var query = API.queryItems(\"Stores\", condition, sortOrder);\n        \n        if(query.error()){\n            //Output error script\n            Spark.setScriptError(\"ERROR\", query.error());\n            //Stop execution of script\n            Spark.exit();    \n        } else{\n             //Create empty object\n            var object = [];\n            //While there are still entries in the cursor retrieved from query\n            while(query.cursor().hasNext()){\n                //Get the entry\n                entry = query.cursor().next();\n                //Populate object with the entries. key = entry ID\n                entryData = entry.getData();\n                \n                object.push(entryData);\n            }\n        }\n        return object;\n    }\n}","template":"<gs-title-block title=\"Item Store Admin\">\n    <gs-row>\n        <gs-col width=\"2\">\n            <gs-link snippet=\"Store_List\" target=\"content\"><button>Back</button></gs-link>\n        </gs-col>\n    </gs-row>\n    {{#each form.Stores}}\n    <gs-row>\n        <gs-col width=\"2\">\n            {{this.MinLevel}} - {{this.MaxLevel}}\n        </gs-col>\n        <gs-col width=\"2\">\n            <gs-link snippet=\"Store_Item_Details?action=view&Store_Item_Id={{this.Id}}\" target=\"content\"><Button>Edit</Button></gs-link>\n        </gs-col>\n    </gs-row>\n    {{/each}}\n    <gs-row>\n        <gs-col width=\"2\">\n            <gs-link snippet=\"Store_List\" target=\"content\"><button>Back</button></gs-link>\n        </gs-col>\n    </gs-row>\n</gs-title-block>","groups":[]},"Store_List":{"shortCode":"Store_List","name":"Store: List","scriptData":"","script":"Spark.setScriptData(\"form\", SnippetProcessor(Spark.getData().scriptData))\n\nfunction SnippetProcessor(data){\n    \n    var form = {};\n    return view(data);\n    \n    function view(data){\n        \n        return form;\n    }\n}\n","template":"<gs-title-block title=\"Store List\">\n    <gs-row>\n        <gs-col width=\"12\">\n            <gs-link snippet=\"Store_Item_List\" target=\"content\"><button>Item Store</button></gs-link>\n        </gs-col>\n    </gs-row>\n    <gs-row>\n        <gs-col width=\"12\">\n            <gs-link snippet=\"Store_Money_Details?action=view\" target=\"content\"><button>Money Store</button></gs-link>\n        </gs-col>\n    </gs-row>\n    <gs-row>\n        <gs-col width=\"12\">\n            <gs-link snippet=\"Store_Deals_List\" target=\"content\"><button>Deals Store</button></gs-link>\n        </gs-col>\n    </gs-row>\n    <gs-row>\n        <gs-col width=\"12\">\n            <gs-link snippet=\"Store_Premium_List\" target=\"content\"><button>Premium Store</button></gs-link>\n        </gs-col>\n    </gs-row>\n    <gs-row>\n        <gs-col width=\"12\">\n            <gs-link snippet=\"Store_Pack_List\" target=\"content\"><button>Pack Store</button></gs-link>\n        </gs-col>\n    </gs-row>\n</gs-title-block>","groups":[]},"Store_Master":{"shortCode":"Store_Master","name":"Store: Master","scriptData":"","script":"Spark.setScriptData(\"form\", SnippetProcessor(Spark.getData().scriptData))\n\nfunction SnippetProcessor(data){\n    \n    var form = {};\n    return view(data);\n    \n    function view(data){\n        \n        return form;\n    }\n}","template":"<gs-row>\n    <gs-col width=\"12\">\n        <gs-placeholder id=\"content\">\n            <gs-snippet snippet=\"Store_List\"></gs-snippet>\n        </gs-placeholder>\n    </gs-col>\n</gs-row>\n","groups":[]},"Store_Money_Details":{"shortCode":"Store_Money_Details","name":"Store: Money Store Details","scriptData":"{\n    \"action\": \"view\"\n}","script":"Spark.setScriptData(\"form\", SnippetProcessor(Spark.getData().scriptData));\n\nfunction SnippetProcessor(data){\n    \n    var form = {};\n    \n    switch(data.action){\n        case \"view\":\n            return view(data);\n    }\n    \n    \n    function view(data){\n        var entryData = GetMoneyStoreData();\n        form.data = entryData;\n        return form;\n    }\n    \n    function GetMoneyStoreData(){\n        //Load API and get entry\n        var API = Spark.getGameDataService();\n        \n        //Attempt to get entry\n        var entryObject = API.getItem(\"Stores\", \"MoneyStore\");\n        \n        //If error attempting to retrieve entry\n        if(entryObject.error()){\n            Spark.setScriptError(\"ERROR\", entryObject.error());\n            Spark.exit();\n        } else {\n            //Get entry\n            var entry = entryObject.document();\n            //Access Data\n            var entryData = entry.getData();\n            \n            return entryData;\n        }\n    }\n}","template":"<gs-title-block title=\"Money Store Details\">\n    <gs-row>\n        <gs-col width=\"2\">\n            <gs-link snippet=\"Store_List\" target=\"content\"><button>Back</button></gs-link>\n        </gs-col>\n    </gs-row>\n    <gs-row>\n        <gs-col width=\"2\">\n            Index\n        </gs-col>\n        <gs-col width=\"3\">\n            Name\n        </gs-col>\n        <gs-col width=\"2\">\n            Amount\n        </gs-col>\n        <gs-col width=\"1\">\n            Price\n        </gs-col>\n        <gs-col width=\"2\">\n            <gs-link snippet=\"Store_Money_Entry?action=viewNew\" target=\"modal-small\"><button>Add Item</button></gs-link>\n        </gs-col>\n        <gs-col width=\"2\">\n            <gs-link snippet=\"Store_Money_Entry?action=viewDelete\" target=\"modal-small\"><button>Delete Item</button></gs-link>\n        </gs-col>\n    </gs-row>\n    {{#each form.data.Contents}}\n    <gs-row>\n        <gs-col width=\"2\">\n            {{@index}}\n        </gs-col>\n        <gs-col width=\"3\">\n            {{this.Name}}\n        </gs-col>\n        <gs-col width=\"2\">\n            {{this.Amount}}\n        </gs-col>\n        <gs-col width=\"1\">\n            {{this.Price}}\n        </gs-col>\n        <gs-col width=\"2\">\n            <gs-link snippet=\"Store_Money_Entry?action=view&Index={{@index}}\" target=\"modal-small\"><button>Edit</button></gs-link>\n        </gs-col>\n    </gs-row>\n    {{/each}}\n    <gs-row>\n        <gs-col width=\"2\">\n            <gs-link snippet=\"Store_List\" target=\"content\"><button>Back</button></gs-link>\n        </gs-col>\n    </gs-row>\n</gs-title-block>","groups":[]},"Store_Money_Entry":{"shortCode":"Store_Money_Entry","name":"Store: Money Store Entry","scriptData":"{\n    \"action\": \"viewDelete\",\n    \"Index\": 0\n}","script":"Spark.setScriptData(\"form\", SnippetProcessor(Spark.getData().scriptData));\n\nfunction SnippetProcessor(data){\n    \n    var form = {};\n    form.Index = data.Index;\n    \n    switch(data.action){\n        case \"view\":\n            return view(data);\n        case \"viewNew\":\n            return viewNew(data);\n        case \"viewDelete\":\n            return viewDelete(data);\n        case \"update\":\n            return update(data);\n        case \"delete\":\n            return deleteItem(data);\n        case \"exit\":\n            return exit(data);\n    }\n    \n    \n    function view(data){\n        var entryData = GetMoneyStoreData();\n        \n        form.data = entryData;\n        form.Name = entryData.Contents[Number(data.Index)].Name;\n        form.Amount = entryData.Contents[Number(data.Index)].Amount;\n        form.Price = entryData.Contents[Number(data.Index)].Price;\n        \n        return form;\n    }\n    \n    function viewNew(data){\n        var entryData = GetMoneyStoreData();\n        form.data = entryData;\n        form.Index = entryData.Contents.length;\n        return form;\n    }\n    \n    function viewDelete(data){\n        var entryData = GetMoneyStoreData();\n        \n        form.data = entryData;\n        form.Index = entryData.Contents.length - 1;\n        \n        form.Name = entryData.Contents[Number(form.Index)].Name;\n        form.Amount = entryData.Contents[Number(form.Index)].Amount;\n        form.Price = entryData.Contents[Number(form.Index)].Price;\n        \n        form.Delete = true;\n        \n        return form;\n    }\n    \n    function exit(data){\n        form.Exit = true;\n        return form;\n    }\n    \n    function update(data){\n        var updatedData = {\n            \"Name\": data.Name,\n            \"Amount\": Number(data.Amount),\n            \"Price\": Number(data.Price)\n        };\n        \n        UpdateItemStoreEntry(Number(data.Index), updatedData);\n        form.Updated = true;\n        \n        return view(data);\n    }\n    \n    function deleteItem(data){\n        DeleteItemStoreEntry();\n        form.Exit = true;\n        return form;\n    }\n    \n    function UpdateItemStoreEntry(index, data){\n        //Save entry and get its data object\n        var API = Spark.getGameDataService();\n    \n        //Attempt to get entry\n        var entryObject = API.getItem(\"Stores\", \"MoneyStore\");\n        \n        //If error attempting to retrieve entry\n        if(entryObject.error()){\n            Spark.setScriptError(\"ERROR\", entryObject.error());\n            Spark.exit();\n        } else {\n            //Get entry\n            var entry = entryObject.document();\n            \n            //Access data\n            var entryData = entry.getData();\n            \n            entryData.LastUpdated = new Date().toISOString();\n            entryData.Contents[index] = data;\n            \n            var entryStatus = entry.persistor().withAtomicIncrements().persist().error();\n            if(entryStatus){\n                //Output error script\n                Spark.setScriptError(\"ERROR\", entryStatus);\n                form.error = entryStatus;\n            }\n            \n            return entryData;\n        }\n    }\n    \n    function DeleteItemStoreEntry(){\n        //Save entry and get its data object\n        var API = Spark.getGameDataService();\n    \n        //Attempt to get entry\n        var entryObject = API.getItem(\"Stores\", \"MoneyStore\");\n        \n        //If error attempting to retrieve entry\n        if(entryObject.error()){\n            Spark.setScriptError(\"ERROR\", entryObject.error());\n            Spark.exit();\n        } else {\n            //Get entry\n            var entry = entryObject.document();\n            \n            //Access data\n            var entryData = entry.getData();\n            \n            entryData.Contents.pop();\n            \n            var entryStatus = entry.persistor().withAtomicIncrements().persist().error();\n            if(entryStatus){\n                //Output error script\n                Spark.setScriptError(\"ERROR\", entryStatus);\n                form.error = entryStatus;\n            }\n            \n            return entryData;\n        }\n    }\n    \n    function GetMoneyStoreData(){\n        //Load API and get entry\n        var API = Spark.getGameDataService();\n        \n        //Attempt to get entry\n        var entryObject = API.getItem(\"Stores\", \"MoneyStore\");\n        \n        //If error attempting to retrieve entry\n        if(entryObject.error()){\n            Spark.setScriptError(\"ERROR\", entryObject.error());\n            Spark.exit();\n        } else {\n            //Get entry\n            var entry = entryObject.document();\n            //Access Data\n            var entryData = entry.getData();\n            \n            return entryData;\n        }\n    }\n    \n    \n}","template":"{{#if form.Exit}}\n    <gs-modal-close></gs-modal-close>\n    <gs-snippet snippet=\"Store_Money_Details?action=view\" target=\"content\"></gs-snippet>\n{{else}}\n\n<gs-title-block title=\"Money Store Entry\">\n    <gs-row>\n        <gs-col width=\"2\">\n            Index\n        </gs-col>\n        <gs-col width=\"4\">\n            Name\n        </gs-col>\n        <gs-col width=\"3\">\n            Amount\n        </gs-col>\n        <gs-col width=\"2\">\n            Price\n        </gs-col>\n    </gs-row>\n    <gs-form snippet=\"Store_Money_Entry?action=update&Index={{form.Index}}\" target=\"modal-small\">\n        <gs-row>\n            <gs-col width=\"2\">\n                <input type=\"text\" name=\"Index\" value=\"{{form.Index}}\" disabled/>\n            </gs-col>\n            <gs-col width=\"4\">\n                <input type=\"text\" name=\"Name\" value=\"{{form.Name}}\" {{#if form.Delete}} disabled {{/if}} />\n            </gs-col>\n            <gs-col width=\"3\">\n                <input type=\"number\" name=\"Amount\" value=\"{{form.Amount}}\" {{#if form.Delete}} disabled {{/if}} />\n            </gs-col>\n            <gs-col width=\"2\">\n                <input type=\"number\" name=\"Price\" value=\"{{form.Price}}\" {{#if form.Delete}} disabled {{/if}} />\n            </gs-col>\n        </gs-row>\n        <gs-row>\n            <gs-col width=\"6\">\n                \n            </gs-col>\n            <gs-col width=\"2\">\n                {{#if form.New}}\n                <gs-submit>Create Item</gs-submit>\n                {{else if form.Delete}}\n                <gs-link snippet=\"Store_Money_Entry?action=delete&Index={{form.Index}}\"><button>Delete</button></gs-link>\n                {{else}}\n                <gs-submit>Save Changes</gs-submit>\n                {{/if}}\n            </gs-col>\n            <gs-col width=\"2\">\n                <gs-link snippet=\"Store_Money_Entry?action=exit\"><button>Close</button></gs-link>\n            </gs-col>\n        </gs-row>\n        {{#if form.Updated}}\n        <gs-row>\n            <gs-col width=\"6\"></gs-col>\n            <gs-col width=\"4\">\n                <gs-alert type=\"success\" message=\"Update Success!\"></gs-alert>\n            </gs-col>\n        </gs-row>\n        {{/if}}\n    </gs-form>\n</gs-title-block>\n{{/if}}\n\n","groups":[]},"player_master":{"shortCode":"player_master","name":"player_master","scriptData":"","script":"Spark.setScriptData(\"form\", SnippetProcessor(Spark.getData().scriptData))\n\nfunction SnippetProcessor(data){\n    \n    var form = {};\n    \n    return view(data);\n    \n    function view(data){\n        \n        var players = Spark.findPlayers({\"_id\" : {\"$oid\" : data.playerId}}, {\"userName\" : 1, \"displayName\" : 1}, 1);\n        form.player = players[0];\n        return form;\n    }\n}\n","template":"<gs-row>\n    <gs-col width=\"12\">\n        <gs-title-block title=\"Edit Player - {{form.player._id.$oid}} - {{form.player.userName}}\" margin=\"0\" padding=\"10\">\n            <gs-row>\n                <gs-col width=\"3\">\n                    <gs-placeholder id=\"details__{{form.player._id.$oid}}\">\n                        <gs-snippet snippet=\"player_details?action=view&playerId={{form.player._id.$oid}}\"></gs-snippet>\n                    </gs-placeholder>        \n                </gs-col>\n                \n                <gs-col width=\"3\">\n                    <gs-placeholder id=\"achievements__{{form.player._id.$oid}}\">\n                        <gs-snippet snippet=\"player_achievements?action=view&playerId={{form.player._id.$oid}}\"></gs-snippet>\n                    </gs-placeholder>        \n                </gs-col>\n                \n                <gs-col width=\"3\">\n                    <gs-placeholder id=\"virtual__goods__{{form.player._id.$oid}}\">\n                        <gs-snippet snippet=\"player_virtual_goods?action=view&playerId={{form.player._id.$oid}}\"></gs-snippet>\n                    </gs-placeholder>        \n                </gs-col>\n                \n                <gs-col width=\"3\">\n                    <gs-placeholder id=\"currencies__{{form.player._id.$oid}}\">\n                        <gs-snippet snippet=\"player_currencies?action=view&playerId={{form.player._id.$oid}}\"></gs-snippet>\n                    </gs-placeholder>        \n                </gs-col>\n\n            </gs-row>\n            \n            <gs-row>\n                <gs-col width=\"4\">\n                    <gs-title-block title=\"Total Requests\" margin=\"0\" padding=\"10\"  height=\"360\">\n                        <gs-chart gs_playerid=\"{{form.player._id.$oid}}\" chartType=\"hist\" group=\"_type\" calc=\"requestCount\" chartPeriod=\"1d\" query=\"total_requests\"></gs-chart>\n                    </gs-title-block>\n                </gs-col>\n                <gs-col width=\"3\">\n                    <gs-title-block title=\"Total Requests\" margin=\"0\" padding=\"10\"  height=\"360\">\n                        <gs-chart gs_playerid=\"{{form.player._id.$oid}}\" chartType=\"pie\" group=\"_type\" calc=\"requestCount\" query=\"total_requests\"></gs-chart>\n                    </gs-title-block>\n                </gs-col>\n                <gs-col width=\"5\">    \n                    <gs-title-block title=\"Request Log\" margin=\"0\" padding=\"10\"  height=\"360\">\n                        <gs-chart gs_playerid=\"{{form.player._id.$oid}}\" chartType=\"data\" pageSize=\"50\" query=\"total_requests\"></gs-chart>\n                    </gs-title-block>\n                </gs-col>\n            </gs-row>\n            \n        </gs-title-block>\n    </gs-col>\n</gs-row>\n\n\n","groups":[]},"player_details":{"shortCode":"player_details","name":"player_details","scriptData":"","script":"Spark.setScriptData(\"player\", SnippetProcessor(Spark.getData().scriptData))\n\nfunction SnippetProcessor(data){\n    \n    var form = {};\n    // load player for view/edit\n    var playerId = data.playerId;\n    var player = Spark.loadPlayer(playerId);\n    \n    switch(data.action){\n        case \"view\":\n            return view(data);\n        case \"update\":\n            update(data);\n            return view(data);\n    }\n    \n    function view(data){\n        \n        //get form data for view\n        form.playerId = playerId;\n        form.userName = player.getUserName();\n        form.displayName = player.getDisplayName();\n        form.isHidden = player.isHiddenOnLeaderboards();\n        \n        return form;\n    }\n    \n    function update(data){\n        \n        //create a ChangeUserDetails request\n        var changeUserDetailsRequest = new SparkRequests.ChangeUserDetailsRequest();\n        \n        var newUserName = data.userName;\n        var newDisplayName = data.displayName;\n        var hidden = data.hidden;\n        \n        // check that old username doesn't match the new one\n        if(player.getUserName() != newUserName){\n        changeUserDetailsRequest.userName = newUserName;\n        }\n        \n        changeUserDetailsRequest.displayName = newDisplayName;\n        \n        var response = Spark.sendRequestAs(changeUserDetailsRequest, playerId);\n        \n        // if ChangeUserDetails response contained an error\n        if(response.error != null){\n            form.error = JSON.stringify(response.error);\n        } else{\n            // set leaderboard visibility for the player\n            if(hidden == \"on\"){\n                player.hideOnLeaderboards();\n            } else{\n                player.showOnLeaderboards();\n            }\n            \n            form.success = true;\n        }\n        \n        form.updated = true;   \n    }\n}","template":"<gs-form snippet=\"player_details?action=update&playerId={{player.playerId}}\" target=\"details__{{player.playerId}}\">\n    <gs-title-block title=\"Player Details\" padding=\"5\" height=\"250\">\n        \n        <gs-row>\n            <gs-col width=\"4\">\n                ID\n            </gs-col>\n            <gs-col width=\"8\">\n                <input value=\"{{player.playerId}}\" type=\"text\" required name=\"playerId\" disabled/>\n            </gs-col>\n        </gs-row>\n        <br/>\n        <gs-row>\n            <gs-col width=\"4\">\n                User Name\n            </gs-col>\n            <gs-col width=\"8\">\n                <input value=\"{{player.userName}}\" type=\"text\" required name=\"userName\"/>\n            </gs-col>\n        </gs-row>\n        <br/>\n        <gs-row>\n            <gs-col width=\"4\">\n                Display Name\n            </gs-col>\n            <gs-col width=\"8\">\n                <input value=\"{{player.displayName}}\" type=\"text\" required name=\"displayName\"/>\n            </gs-col>\n        </gs-row>\n        <gs-row>\n            <gs-col width=\"4\">\n                Hide On Leaderboards\n            </gs-col>\n            <gs-col width=\"8\">\n                <input rel=\"confirm-check\" type=\"checkbox\" name=\"hidden\" id=\"hidden\" class=\"checky\" {{#compare player.isHidden \"==\" true}}checked{{/compare}} />\n    \t\t\t<label for=\"hidden\" class=\"checky\"><span></span></label>\n            </gs-col>\n        </gs-row>\n        <gs-row>\n            <gs-col width=\"7\" offset=\"1\">\n            {{#if player.updated}}\n                {{#if player.success}}\n                    <gs-alert type=\"success\" message=\"Saved!\"></gs-alert>\n                {{else}}\n                    <gs-alert type=\"error\" message=\"{{error}}\"></gs-alert>\n                {{/if}}\n            {{/if}}\n            </gs-col>\n            <gs-col width=\"4\">\n                <gs-submit>Save Changes</gs-submit>\n            </gs-col>\n        </gs-row>\n\n    </gs-title-block>\n</gs-form>","groups":[]},"player_search":{"shortCode":"player_search","name":"player_search","scriptData":"","script":"","template":"<gs-form snippet=\"player_search_results\" target=\"player__results\">\n    <gs-snippet snippet=\"user_query\"></gs-snippet>\n        <gs-col width=\"12\">\n            <gs-submit>Submit</gs-submit>\n        </gs-col>\n</gs-form>","groups":[]}},"queries":{}}